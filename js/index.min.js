/*
 * astroair.js
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 */
var ready=callback=>{
	"loading"!=document.readyState?callback():document.addEventListener("DOMContentLoaded",callback)
};
ready(()=>{
	initAll()
});
const version="2.0.0",minVoyVersion="2.0.0";
function initAll(){
	setInitialBntInactive(),
	initSeqCharts(),
	writeVersion(),
	closeMiniMenu(),
	windowWidth=document.documentElement.clientWidth,
	getLocalStorageIp(),
	getLocalStorageAnimPref(),
	getLocalStorageMultiFov(),
	getLocalStorageAlad(),
	getLocalStorageMosaic(),
	initYScaleGuideChart(),
	setInitialBtnActive(),
	initAladin(),
	$(".aladin-location").prepend("<span class='aladin-location-text aladin-reticleColor' id='specCoord'>J2000 </span>"),
	createAlertFov(),
	checkFovIncompleteData(fovdata.DX,fovdata.DY),
	populateDdProfileMenu(),
	$(window).trigger("resize"),
	$(".alert").hide(),
	$((function(){$('[data-toggle="tooltip"]').tooltip()})),
	firstDelayedRedraw(),
	document.getElementById("connectBtn").addEventListener("click",startconn)
}
var internetconnected=!1,
	imgShooting=!1,
	tempUIDshot,
	tempUIDsearch,
	startupConnected=!1,
	btnToInitActivate=["#connectBtn",".modal-voy-btn",".reset-btn",".menuBtn"],
	lev1Btns=[".lev1active"],
	focuserPosition,
	focuserTemp,
	simulatorMode=!1,
	simbadPointer=!1,
	blindsolve=!1,
	cameraStatus,
	actualCameraFilter,
	cameraFilterList=[],
	voyIsRunning=!1,
	actionToConfirm="",
	btnTempActive=[],
	imageStats=[],
	focusStats=[],
	windowWidth=0,
	remoteLogLevel=0,
	genStatusText="",
	logoanimationaccepted,
	runSeq="",
	runDs="",
	fovdata={},
	actualCcdData={},
	connectedCcdData={},
	connectedProfileName,
	sameFov=!0,
	multiFov={Virtual_Fov_Default:{DX:3358,DY:2536,PixelSize:5.4,PA:0,Focallen:530}},
	mosaicSettings={Wnum:1,Hnum:1,Overlap:15,angleAdj:!1},
	mosaicTiles=[],
	actualProfileName="",
	tempRaRec,
	tempDecRec,
	roboClipGroup=[],
	roboClipTemp=[],
	roboClipOrder=0,
	roboClipNameTxt="",
	roboClipGroupTxt="",
	roboClipNoteTxt="",
	rcFilterSelected=!1,
	mountConnected=!1,
	ccdConnected=!1,
	ccdCoolerOn=!1,
	planConnected=!1,
	plateSolveConnected=!1,
	guideConnected=!1,
	autofocusConnected=!1,
	mountTracking=!1,
	mountParked=!1,
	mountFlip=0,
	mountSlew=!1,
	ccdStatus=0,
	connected=!1,
	websocket,
	pollingJSON,
	pollingInterval=5,
	str_end="\r\n",
	wsUri,
	tcpPort,
	heartBeat,
	HostJ,
	InstJ,
	voyVer;
function writeVersion(){
	$("#dashVer").text(version)
}
function setBtnActive(btnId){
	$(btnId).removeClass("disabled btn-dark")
}
function setBtnNotActive(btnId){
	$(btnId).addClass("disabled btn-dark")
}
function toggleDisablBtn(btnId){
	$(btnId).toggleClass("disabled btn-dark")
}
function setInitialBntInactive(){
	$(".btn").addClass("disabled btn-dark")
}
function setInitialBtnActive(){
	btnToInitActivate.forEach((function(item){setBtnActive(item)}))
}
function writeToLog(message){
	var tempRow='<span class="logContRow">'+message.toString()+"</span>";
	$("#logDiv").prepend(tempRow)
}
function changeButtonStatus(){
	connected?(document.getElementById("connectBtn").classList.add("btn-success"),document.getElementById("connectBtn").innerHTML='<i class="fas fa-link fa-spin mr-1"></i>Connected',setBtnActive("#disconnectBtn"),setBtnActive("#sendBtn")):(document.getElementById("connectBtn").classList.remove("btn-success"),document.getElementById("connectBtn").innerHTML='<i class="fas fa-link mr-1"></i>Connect',setBtnNotActive(".btn"),setBtnActive("#connectBtn"))
}
function setStatusLedOn(ledId){
	document.getElementById(ledId).classList.add("ledgreen")
}
function setStatusLedOff(ledId){
	document.getElementById(ledId).classList.remove("ledgreen")
}
function buttonGreen(btnId,btnText){
	null!==btnText&&$('"'+btnId+'"').text(btnText),
	$('"'+btnId+'"').addClass("btn-success")
}
function buttonGreenOff(btnId,btnText){
	null!==btnText&&$('"'+btnId+'"').text(btnText),
	$('"'+btnId+'"').removeClass("btn-success")
}
function timeStampUtility(timestamp){
	var date=new Date(1e3*timestamp),
		hours=date.getHours()+date.getTimezoneOffset()/60;
	hours<0&&(hours+=24),hours=hours.toString();
	var minutes=date.getMinutes().toString(),
		seconds=date.getSeconds().toString(),
		millsec=date.getMilliseconds().toString(),
		formattedTime;
	return padZeroStr(hours)+":"+padZeroStr(minutes)+":"+padZeroStr(seconds)+"."+padZeroStr(millsec,3)
}
function getTimeNow(){
		var today=new Date,
		hours="0"+today.getHours(),
		minutes="0"+today.getMinutes(),
		seconds="0"+today.getSeconds(),
		millsec="00"+today.getMilliseconds(),
		formattedTime;
	return hours.substr(-2)+":"+minutes.substr(-2)+":"+seconds.substr(-2)+"."+millsec.substr(-3)
}
function getTimeString(){
	var today=new Date,
		time;
	return today.getFullYear()+today.getMonth()+today.getDay()+"_"+today.getHours()+today.getMinutes()+today.getSeconds()
}
function initSeqCharts(){
	$((function(){
		$("#singleShotChart").easyPieChart({
			barColor:"#4285f4",onStep:function(from,to,percent){
				$(this.el).find(".percent").text(Math.round(percent))
			}
		})
	})),
	$((function(){
		$("#seqChart").easyPieChart({
			barColor:"#4caf50",onStep:function(from,to,percent){
				$(this.el).find(".percent").text(Math.round(percent))
			}
		})
	}))
}
function getPercent(n1,n2){
	var percent=Math.round(n1/n2*100);
	return 0===n1&&(percent=0),percent
}
function percentage(num,per){
	return num+num/100*per
}
function resetInterfaceOnRun(){
	resetEnvironmentData(),
	resetShotPanel(),
	resetImageGraph(),
	$(".imgStatItem").remove(),
	resetTempGraph(),
	resetGuideGraph(),
	resetGlobalvar(),
	$(".btn").css("pointer-events","auto"),
	$(".btn").addClass("disabled btn-dark"),
	$(".statusLed").removeClass("ledgreen"),
	$(".blindSwitchInput").prop("checked",!1),
	$("body").css("cursor","default"),
	$("#startupConn").html("Connect"),
	resetInfoDataItem(),
	stopAnimLogo(),
	hideStatusBar(),
	$("#seqRunli").addClass("d-none").removeClass("d-flex"),
	$("#dsRunli").addClass("d-none").removeClass("d-flex"),
	setInitialBtnActive()
}
function resetInfoDataItem(){
	var elements=document.querySelectorAll(".info-data-item:not(.text-muted)");
	elements.forEach((function(item){item.textContent=""})),
	elements.length=0
}
function resetGlobalvar(){
	imgShooting=!1,
	tempUIDshot="",
	tempUIDsearch="",
	startupConnected=!1,
	voyIsRunning=!1,
	imageStats=[],
	cameraStatus="",
	mountConnected=!1,
	ccdConnected=!1,
	ccdCoolerOn=!1,
	planConnected=!1,
	guideConnected=!1,
	autofocusConnected=!1,
	mountTracking=!1,
	mountParked=!1,
	mountFlip=0
}
function versionNotSupported(minVoyVersion,actVoyVer){
	var cleanActVersion,
		numericActualVersion,
		numericMinVer,
		result;
	return transformVersionNumber(actVoyVer.substring(7,actVoyVer.indexOf("-")))<transformVersionNumber(minVoyVersion)
}
function transformVersionNumber(number){
	var numArray=number.split("."),
		result;
	return numArray[0]*=1e6,numArray[1]*=1e3,
		numArray[2]=1*numArray[2].replace(/\D/g,""),
		numArray.reduce((a,b)=>a+b,0)
}
function switchLogProcess(){
	var swOnOffPom=$("#logLevel+.lever:after"),
		swOnOffBkg=$("#logLevel+.lever"),
		swLogLevPom=$("#logOnOff+.lever:after"),
		swLogLevBkg=$("#logOnOff+.lever");
	swOnOffPom.addClass("activeSwPom")
}
function modalDoubleWarnFire(message,title,ident,param){
	""==title&&(title="Confirm action?"),
	""==message&&(message="Are you sure to confirm your request?"),
	$("#contWarnModal").html(message),
	$("#modalWarnTit").html(title),
	$("#confirmDoubleWarn").off(),
	$("#confirmDoubleWarn").on("click",e=>{doubConfSecStep(ident,param)}),
	$("#modalDoubleWarning").modal("show")
}
function goToTopPage(){
	document.body.scrollTop=0,
	document.documentElement.scrollTop=0
}
$(".card-header").click((function(){
	var expand='<img src="img/expandIcn.png" alt="xpand">',
		collapse='<img src="img/collapseIcn.png" alt="collapse">';
	windowWidth<=960?(
		$header=$(this),
		$btn=$(this).find(".collapseBtn"),
		$content=$header.next(),
		$content.slideToggle(300,(function(){
			$btn.html((function(){
				return $content.is(":visible")?collapse:expand
			}))
		}))
	):(
		$header=$(this),
		$btn=$(this).closest(".row").find(".collapseBtn"),
		$content=$(this).closest(".row").find(".card-body"),
		$content.slideToggle(300,(function(){
			$btn.html((function(){
				return $content.is(":visible")?collapse:expand
			}))
		}))
	)
})),
window.onresize=function(event){
	newWidth=document.documentElement.clientWidth,
	newWidth!=windowWidth&&(
		windowWidth=newWidth,
		newWidth>960&&$(".card-body").slideDown(0,(function(){
			$(".collapseBtn").html('<img src="img/expandIcn.png" alt="xpand">')
		})),
		closeMiniMenu()
	)
},
secondDecimal=num=>Math.round(100*num)/100;
var btnGoToTop=document.querySelector("#goToTopBtn");
function scrollFunction(){
	document.body.scrollTop>50||document.documentElement.scrollTop>50?btnGoToTop.style.display="block":btnGoToTop.style.display="none"
}
function easingQuadInOut(t,b,c,d){
	return(t/=d/2)<1?c/2*t*t+b:-c/2*(--t*(t-2)-1)+b
}
btnGoToTop.addEventListener("click",goToTopPage),
window.onscroll=function(){
	scrollFunction()
},
$("#handHand").click((function(){
	$("#miniMenuContainer").css("left")>="0px"?closeMiniMenu():openMiniMenu()
})),
closeMiniMenu=()=>{
	var w=$("#miniMenu").css("width"),
		regexStr=w.match(/[a-z]+|[^a-z]+/gi);
	w=+regexStr[0]-10,
	$("#miniMenuContainer").css("left","-"+w+"px")
},
openMiniMenu=()=>{
	$("#miniMenuContainer").css("left","4px")
},
$(".menuBtn").click((function(){
	var h=$("#navbarVoyager").css("height");
	$(".anchor").css("top","-"+h),$("#handHand").click()
}));
var elemFullScreen=document.documentElement;
function openFullscreen(){
	elemFullScreen.requestFullscreen?elemFullScreen.requestFullscreen():elemFullScreen.mozRequestFullScreen?elemFullScreen.mozRequestFullScreen():elemFullScreen.webkitRequestFullscreen?elemFullScreen.webkitRequestFullscreen():elemFullScreen.msRequestFullscreen&&elemFullScreen.msRequestFullscreen()
}
function closeFullscreen(){
	document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.msExitFullscreen&&document.msExitFullscreen()
}
switchFullscreen=()=>{
	document.fullscreenElement?closeFullscreen():openFullscreen()
};
var ua=window.navigator.userAgent,iOS=!!ua.match(/iPad/i)||!!ua.match(/iPhone/i),webkit=!!ua.match(/WebKit/i),iOSSafari=iOS&&webkit&&!ua.match(/CriOS/i),
	aladin;
function testPerformance(){
	const startTime=performance.now(),
	duration=performance.now()-startTime
}
function renderAladin(){
	checkParamSimbadPointer(),
	aladinTarget="",
	void 0!==fovdata.radec?aladinTarget=fovdata.radec:aladinTarget="00 42 44.330, +41 16 7.50",
	aladin=A.aladin("#aladin-lite-div",{
		cooFrame:"j2000",
		survey:"P/DSS2/color",
		target:aladinTarget,
		fov:1,
		showReticle:!0,
		showGotoControl:!1,
		showLayersControl:!1,
		showShareControl:!1,
		showZoomControl:!1,
		showFullscreenControl:!1,
		showSimbadPointerControl:simbadPointer,
		showFrame:!0,
		reticleSize:25,
		reticleColor:"#ff0000",
		log:!1
	}),
	null==fovdata.pixsize&&(populateFovDataValues(multiFov.Virtual_Fov_Default),actualProfileName="Virtual_Fov_Default",fovdata.profileName=actualProfileName),
	$("#search_com").click((function(){
		var objtosearch=jQuery("#inputsearch").val();
		window.aladin.gotoObject(objtosearch,{
			success:function(){
				getCoordinateAladin(),
				setTimeout(reDrawVfov,1200)
			},
			error:function(){
				errorFire("Aladin Search: object not found")
			}
		})
	})),
	$("#resetPA").click((function(){
		changePAng(0)
	})),
	document.getElementById("fdb-brightness").addEventListener("input",(function(e){
		var brightness="brightness("+this.value+"%)";
		jQuery(".aladin-imageCanvas").css({
			"-webkit-filter":brightness,
			"-moz-filter":brightness,
			"-ms-filter":brightness,
			"-o-filter":brightness,
			filter:brightness
		})
	})),
	document.getElementById("fdb-pAng").addEventListener("input",(function(e){
		changePAng(this.value)
	})),
	jQuery("#inputsearch").val(""),
	$("#paInd").text(" "+fovdata.pAng+"°"),
	$("#fdb-pAng").val(fovdata.pAng),
	$("#fdb-brightness").val(100),
	getCoordinateAladin(),
	$(".aladin-reticleCanvas").unbind("mousewheel"),
	$("#simulatorSelected").attr("disabled",!0);
	let reticleCanvas=document.querySelector(".aladin-reticleCanvas");
	reticleCanvas.addEventListener("mouseup",reticleMouseUpAladin),
	reticleCanvas.addEventListener("touchend",(function(e){
		var mouseEvent=new MouseEvent("mouseup",{});
		reticleCanvas.dispatchEvent(mouseEvent)
	}),!1);
	var alawidth=$("#aladin-lite-div").width(),
		alaheight=$("#aladin-lite-div").height();
	createframeFoV(fovdata.fovx,fovdata.fovy,"#ffffff",alawidth,alaheight,fovdata.reso,0,!0,!0,"VoyagerFovSimulator")
}
function calcfov(sizex,sizey,pixSize,focal){
	var fovx=.016666666666667*Math.round(3438*Math.atan(sizex/focal)),
		fovy=.016666666666667*Math.round(3438*Math.atan(sizey/focal)),
		resolution,
		results;
	return[fovx=fovx.toFixed(2),fovy=fovy.toFixed(2),Math.round(100*Math.atan(pixSize/focal)*206,3)/100]
}
function getCoordinateAladin(){
	raDec=aladin.getRaDec(),
	fovdata.radec=raDec[0]+", "+raDec[1],
	ra=raDec[0]/15,dec=raDec[1],
	$("#fovsimRA").text(coordinateFormat(ra,"h")),
	$("#fovsimDEC").text(coordinateFormat(dec,"º")),
	setClipboardData(raDec),
	saveLocalStorageAlad()
}
function convertRaInSexad(ra){
	var raH=(ra/15).toTrunc(),
		raM=(4*(ra-15*raH)).toTrunc(),
		raS;
	return raH+" "+raM+" "+(240*(ra-15*raH-raM/4)).toFixed(3)
}
function convertDecInSexad(){
	var sign="",
		decD=dec.toTrunc(),
		decM=(60*(dec-decD)).toTrunc(),
		decS=Math.abs(3600*(dec-decD-decM/60));
	return decM=Math.abs(decM),(sign=0===decD&&dec<0?"-":"")+decD+" "+decM+" "+decS.toFixed(3)
}
function getCoordinateAladinRoboClip(){
	$(".rcField").val("");
	let tempRa=$("#fovsimRA").text(),
		tempDec=$("#fovsimDEC").text(),
		tempPa=fovdata.pAng,tempUid=generateUID();
	$("#raRc").val(tempRa),
	$("#decRc").val(tempDec),
	$("#paRc").val(tempPa,2),
	$("#rcUid").val(tempUid),
	chkIfMos()?$("#ledMosaicRoboclip").text("Mosaic ["+mosaicSettings.Hnum+"x"+mosaicSettings.Wnum+"]"):$("#ledMosaicRoboclip").text(""),
	enableSaveDelBtn(!0),
	showRcAlert("#rcSuccess","Coords and PA retreived from actual Virtual FOV")
}
function toFixedTrunc(x,n){
	const v=("string"==typeof x?x:x.toString()).split(".");
	if(n<=0)
		return v[0];
	let f=v[1]||"";
	if(f.length>n)
		return`${v[0]}.${f.substr(0,n)}`;
	for(;f.length<n;)
		f+="0";
	return`${v[0]}.${f}`
}
iOSSafari?$("#fsBtn").addClass("d-none"):$("#fsBtn").click(()=>{switchFullscreen()}),
$("#collapseAllBtn").click(()=>{collapseAllPanels()}),
collapseAllPanels=e=>{
	$(".card-body").slideUp(300,(function(){
		closeMiniMenu(),
		goToTopPage()
	}))
},
saveLocalStorage=ip=>{
	""!=ip&&localStorage.setItem("host",ip)
},
getLocalStorageIp=()=>{
	var ip=localStorage.getItem("host");
		document.getElementById("ipAddress").value=ip,
		checkParamPort(),
		checkParamWssSwitch()
},
initAladin=()=>{
	var isOnline;
	window.navigator.onLine?renderAladin():($("#aladinRow").hide(),errorFire("Without internet connection Virtual FOV Panel is hidden."))
},
createframeFoV=(wDeg,hDeg,col,appH,appV,scopeRes,maxOvl,annotateOvl,description)=>{
	vFoVfrm=virtualFoV.length,
	virtualFoV[vFoVfrm]=new frameFoV(wDeg,hDeg,col,appH,appV,scopeRes,maxOvl,annotateOvl,description),
	vFoVdata[vFoVfrm]=new voyFoVInit,
	aladin.addCanvas(virtualFoV[vFoVfrm].fdbgi),
	vFoVStart()
},
coordinateFormat=(value,unit)=>{
	var negative=0>value;
	value=parseFloat(3600*value,10)/3600;
	var _intpart=parseInt(value,10),
		minutes=60*Math.abs(value-_intpart),
		_minutes=parseInt(minutes,10),
		seconds,
		_seconds=parseFloat((60*(minutes-_minutes)).toFixed(3));
	return`${negative&&0===_intpart?"-":""}${_intpart.zeropad()}${unit} ${_minutes.zeropad()}' ${_seconds.zeropad()}"`
},
coordinateFormatClear=value=>{
	var negative=0>value;
	value=parseFloat(3600*value,10)/3600;
	var _intpart=parseInt(value,10),
		minutes=60*Math.abs(value-_intpart),
		_minutes=parseInt(minutes,10),
		seconds,
		_seconds=parseFloat((60*(minutes-_minutes)).toFixed(3));
	return`${negative&&0===_intpart?"-":""}${_intpart.zeropad()} ${_minutes.zeropad()} ${_seconds.zeropad()}`
},
changePAng=valRot=>{
	fovdata.pAng=parseFloat(valRot),
	fovdata.pAng<0&&(fovdata.pAng=fovdata.pAng+360),
	vFoVdata[vFoVfrm].fovRotation=fovdata.pAng,
	vFoVdata[vFoVfrm].fovRotation<0&&(vFoVdata[vFoVfrm].fovRotation=vFoVdata[vFoVfrm].fovRotation+360),
	saveLocalStorageAlad(),
	$("#paInd").text(" "+fovdata.pAng+"°"),
	$("#fdb-pAng").val(fovdata.pAng),
	vFoVStart()
},
saveLocalStorageAlad=()=>{
	fovdata.profileName=actualProfileName,
	localStorage.setItem("fovdata",JSON.stringify(fovdata))
},
handleLocalStorageProfile=()=>{
	multiFov[actualProfileName]=actualCcdData,
	setLocalStorageMultiFov(),
	populateDdProfileMenu()
},
getLocalStorageAlad=()=>{
	var tempfovdata=JSON.parse(localStorage.getItem("fovdata"));
	"fovdata"in localStorage?(fovdata=tempfovdata,actualProfileName="Last_Used",actualCcdData.DX=fovdata.DX,actualCcdData.DY=fovdata.DY,actualCcdData.PixelSize=fovdata.pixsize,actualCcdData.PA=fovdata.pAng,actualCcdData.Focallen=fovdata.focal,handleLocalStorageProfile(),$("#textSetupAladin").text("Sensor and Telescope data retreived from last used.")):(actualCcdData=multiFov.Virtual_Fov_Default,actualProfileName="Virtual_Fov_Default",$("#textSetupAladin").text("Sensor and Telescope data not avaiable, default data loaded.")),
	populateAladinfield(),
	$("#fdb-pAng").val(fovdata.pAng),
	$("#paInd").text(" "+fovdata.pAng+"°")
},
populateAladinfield=()=>{
	$("#setupReso").text(fovdata.reso+'"/px'),
	$("#setupFocal").text(fovdata.focal+" mm");
	var fovxarcmin=(60*fovdata.fovx).toFixed(1),
		fovyarcmin=(60*fovdata.fovy).toFixed(1);
	$("#fovXsize").text(fovdata.fovx+" ° ("+fovxarcmin+"')"),
	$("#fovYsize").text(fovdata.fovy+" ° ("+fovyarcmin+"')"),
	$("#chipXsize").text(fovdata.xsize+" mm"),
	$("#chipYsize").text(fovdata.ysize+" mm"),
	$("#chipXsizePx").text(fovdata.DX),
	$("#chipYsizePx").text(fovdata.DY),
	$("#pixSize").text(fovdata.pixsize),
	checkFovIncompleteData(fovdata.DX,fovdata.DY)
},
checkFovIncompleteData=(sizeX,sizeY)=>{
	if(aladin)
		if(0===sizeX||0===sizeY){
			const text="Incomplete sensor data,",
				text2="please connect to Voyager environment",
				text3="or change profile",
				pos=85;
			aladin.addCanvas("canvasAlert");
			var canvas=document.getElementById("canvasAlert");
			canvas.style.zIndex=2;
			var ctx=canvas.getContext("2d");
			ctx.textAlign="center",
			ctx.textBaseline="middle",
			ctx.fillStyle="red",
			ctx.font="bold 15px Arial",
			ctx.fillText(text.toUpperCase(),0,pos),
			ctx.fillText(text2.toUpperCase(),0,pos+20),
			ctx.fillText(text3.toUpperCase(),0,pos+40)
		}else{
			var element=document.getElementById("canvasAlert");
			void 0!==element&&null!=element&&aladin.removeCanvas("canvasAlert")
		}
},
aladinFindOnReturn=e=>13!=event.which&&13!=event.keyCode||($("#search_com").trigger("click"),!1),
sendRaDecToFov=(ra,dec)=>{
	var raTosend=convertRainDecimal(ra),
		decTosend=convertDecinDecimal(dec);
	aladin.gotoRaDec(raTosend,decTosend),
	getCoordinateAladin()
},
$("#simulatorSelected").click((function(){
	mountConnected&&(simulatorMode=this.checked),
	adaptFovAsset()
})),
$(".blindSwitchInput").click((function(){
	blindsolve=this.checked,
	$(".blindSwitchInput").prop("checked",blindsolve)
})),
adaptFovAsset=()=>{},
convertRainDecimal=ra=>{
	var tmp=ra.split(/[^\d\w]+/),
		result;
	return tmp[2]=parseFloat(tmp[2])+parseFloat("0."+tmp[3]),15*(textFloat(tmp[0])+textFloat(tmp[1]/60)+textFloat(tmp[2]/3600))
},
convertDecinDecimal=dec=>{
	var firstchar=dec.substr(0,1),
		numchar,
		tmp=dec.substr(1,dec.length).split(/[^\d\w]+/),
		result;
	return tmp[2]=parseFloat(tmp[2])+parseFloat("0."+tmp[3]),firstchar+(textFloat(tmp[0])+textFloat(tmp[1]/60)+textFloat(tmp[2]/3600))
},
reticleMouseUpAladin=()=>{
	getCoordinateAladin(),
	setTimeout(reDrawVfov,500),
	simulatorMode&&$("#simulatorSelected").trigger("click")
},
$("#getTelescopeCoord").click((function(){
	mountConnected&&(sendRaDecToFov(tempRaRec,tempDecRec),setTimeout(reDrawVfov,2e3))
})),
$("#sendCoordToFov").click((function(){
	var raField=$("#raSearch").val(),
		decField=$("#decSearch").val();
	""!==raField?sendRaDecToFov(raField,decField):errorFire("Please insert RA and DEC J2000 coordinates or make a Search before send to Virtual Fov.","Empty coords field")
})),
$("#sendToFovSolveResult").click((function(){
	var tempRa=$("#solvRA").text(),
		tempDec=$("#solvDEC").text(),
		tempPa=$("#solvPA").text();
	""!==tempRa?(aladin.gotoRaDec(15*tempRa,tempDec),getCoordinateAladin(),$("#paInd").text(" "+tempPa+"°"),changePAng(tempPa),$("#inputsearch").val("")):errorFire("Please complete a Plate Solve before send to Virtual Fov.","Empty PlateSolve Data")
})),
dateconversion=datetoconver=>{
	var d=new Date(0);
	return d.setUTCSeconds(datetoconver),d
},
$("#getDataRcFov").click(getCoordinateAladinRoboClip),
$("#groupSelect").on("change",(function(){
	$("#newGroup").val("")
})),
$("#newGroup").on("keyup",(function(){
	$("#groupSelect").val("")
})),
$("#newGroup").on("change",(function(){
	$("#groupSelect").val("")
})),
Number.prototype.zeropad=function(){
	let n=this;
	return n<10&&n>0&&(n="0"+n),0==n&&(n="0"+n),n<0&&n>-9&&(n="-0"+n.toString().slice(-1)),n
},
setClipboardData=raDec=>{
	let ra,
		dec,
		strForCopy=coordinateFormatClear(raDec[0]/15)+";"+coordinateFormatClear(raDec[1]);
	document.querySelector("#alaCopyBtn").setAttribute("data-clipboard-text",strForCopy)
};
var coordClipB=new ClipboardJS("#alaCopyBtn");
coordClipB.on("success",(function(e){
	$("#alaCopyBtn").tooltip("hide"),
	e.clearSelection()
})),
coordClipB.on("error",(function(e){
	errorFire("Clipboard error "+e.trigger,"Clipboard error")
})),
setClipboardMos=()=>{
	let strForCopy=getMosaicCsvText();
	document.querySelector("#mosaCopyBtn").setAttribute("data-clipboard-text",strForCopy)
},
$("#mosaCopyBtn").click((function(){
	setClipboardMos()
}));
var mosClipB=new ClipboardJS("#mosaCopyBtn");
mosClipB.on("success",(function(e){
	$("#mosaCopyBtn").tooltip("hide"),
	e.clearSelection()
})),
mosClipB.on("error",(function(e){
	errorFire("Clipboard error "+e.trigger,"Clipboard error")
})),
$.fn.modal.Constructor.prototype._enforceFocus=function(){};
var mosClipBlist=new ClipboardJS("#copyMosList");
function padZeroStr(str,len){
	var zeros;
	return len=len||2,(new Array(len).join("0")+str).slice(-len)
}
function startconn(){
	connected||connect()
}
function connect(){
	var inputField=document.getElementById("ipAddress"),
		urlpart=extractHostname(inputField.value);
	inputField.value=urlpart,tcpPort=getTcpPort();
	let ws_protocol=getWs_protocol();
	"localhost"===urlpart?(wsUri=ws_protocol+urlpart.toString()+":"+tcpPort,createWebSocket()):""===urlpart?(wsUri=ws_protocol+"localhost:"+tcpPort,createWebSocket()):(wsUri=ws_protocol+urlpart.toString()+":"+tcpPort,createWebSocket()),
	saveLocalStorage(inputField.value)
}
function extractHostname(url){
	var hostname;
	return hostname=(hostname=(hostname=url.indexOf("//")>-1?url.split("/")[2]:url.split("/")[0]).split(":")[0]).split("?")[0]
}
function createWebSocket(){
	(websocket=new WebSocket(wsUri)).onopen=function(evt){
		onOpen(evt)
	},
	websocket.onclose=function(evt){
		onClose(evt)
	},
	websocket.onmessage=function(evt){
		onMessage(evt)
	},
	websocket.onerror=function(evt){
		onError(evt)
	},
	connectingFire()
}
function errorFire(message,title){
	""==title&&(title="Error Message!"),
	""==message&&(message="Undefined error. Trouble with connection?"),
	$("#errorMessage").html(message),
	$("#errorModalTitle").html(title),
	$("#centralModalDanger").modal("show")
}
function connectingFire(message){
	$("#centralModalConnecting").modal("show"),
	""!=message&&$("#infoMessage").html(message)
}
function connectingHide(){
	setTimeout((function(){
		$("#centralModalConnecting").modal("hide")
	}),600)
}
function infoModalFire(msg,caption){
	$("#infoModalGeneric").modal("show"),
	""!=msg&&$("#infoModalMessage").html(msg),
	""!=caption&&$("#genericMessageinfo").html(caption)
}
function onOpen(evt){
	connectingHide(),
	connected=!0,
	changeButtonStatus(),
	setBtnActive(".lev1active"),
	writeToLog(getTimeNow()+" &emsp;<span class='logMsgType text-white'>[ DSHB ]</span> &emsp; Voyager Application Server CONNECTED"),
	sendRemoteDashboardMode()
}
function sendMessage(){
	var msgLoc=document.getElementById("message").value;
	connected?0==msgLoc.length?errorFire("Please enter JSON string..."):doSend(msgLoc):connected||errorFire("Error to send Message, is it connected?")
}
function onClose(event){
	connected&&(writeToLog(getTimeNow()+" &emsp;<span class='logMsgType text-white'>[ DSHB ]</span> &emsp; Voyager Application Server DISCONNECTED"),
	connected=!1,clearInterval(heartBeat),
	setStatusLedOff("connStatus"),
	setInitialBntInactive(),
	$("#voyver").text("Voyager Application Server connection status"),
	changeButtonStatus(),
	resetInterfaceOnRun())
}
function closeconn(){
	connected&&websocket.close()
}
function onError(event){
	connectingHide();
	var reason="Connection error: Application Server Unavailable.";
	writeToLog(getTimeNow()+" &emsp;<span class='logMsgType text-white'>[ DSHB ]</span> &emsp;"+reason),
	errorFire(reason,"Connection Error")
}
function doSend(message){
	var datatoSend=message+str_end;
	connected?websocket.send(datatoSend):errorFire("Server Not Connected, it's impossible to send data.","Error Send JSON")
}
function textInt(textVal,defaultVal){
	return isNaN(parseInt(textVal,10))?defaultVal:parseInt(textVal,10)
}
function textFloat(textVal,defaultVal){
	return isNaN(parseFloat(textVal))?defaultVal:parseFloat(textVal)
}
if(setClipboardMosList=str=>{
	let strForCopy=str;
	document.querySelector("#copyMosList").setAttribute("data-clipboard-text",strForCopy)
},
mosClipBlist.on("success",(function(e){
	$("#copyMosList").tooltip("hide"),
	e.clearSelection()
})),
mosClipBlist.on("error",(function(e){
	errorFire("Clipboard error "+e.trigger,"Clipboard error")
})),
$(".logoAnimationSwitch").click((function(){
	voyIsRunning?$(".logoAnimationSwitch").prop("checked",!logoanimationaccepted):(logoanimationaccepted=!this.checked,$(".logoAnimationSwitch").prop("checked",!logoanimationaccepted),saveLocalStorageAnimPref())
})),
saveLocalStorageAnimPref=()=>{
	null!==logoanimationaccepted&&localStorage.setItem("animationlogo",logoanimationaccepted)
},
getLocalStorageAnimPref=()=>{
	let tempPref=JSON.parse(localStorage.getItem("animationlogo"));
	logoanimationaccepted=null!==tempPref&&tempPref,
	$(".logoAnimationSwitch").prop("checked",!logoanimationaccepted)
},
resetLocalStorageData=()=>{
	localStorage.clear(),
	window.location.reload(!0)
},
getLocalStorageMultiFov=()=>{
	null!==localStorage.getItem("multiFov")&&(multiFov=JSON.parse(localStorage.getItem("multiFov")),populateDdProfileMenu())
},
setLocalStorageMultiFov=()=>{
	localStorage.setItem("multiFov",JSON.stringify(multiFov))
},
populateDdProfileMenu=()=>{
	let ddMenu=document.querySelector("#profileMenuSelId"),
		textDesc=document.querySelector("#textSetupAladin");
	for(var profName in ddMenu.innerHTML="",multiFov)
		if(multiFov.hasOwnProperty(profName)){
			let profItem=document.createElement("div");
			profItem.classList="dropdown-item drop-profile",
			profItem.setAttribute("data-value",profName);
			let textPrfName=document.createTextNode(profName);
			profItem.appendChild(textPrfName),
			ddMenu.appendChild(profItem)
		}
	document.querySelectorAll(".drop-profile").forEach(link=>{
		link.addEventListener("click",(function(event){
			handleProfileAlert();
			let dataProfile=event.currentTarget.getAttribute("data-value");
			actualProfileName=dataProfile,
			renderFoV(multiFov[dataProfile]),
			textDesc.innerHTML="Profile FoV data selected: "+actualProfileName
		}))
	})
},
reDrawVfov=()=>{
	(mosaicSettings.Wnum>1||mosaicSettings.Hnum>1)&&virtualFoV[vFoVfrm].vFovDraw(aladin)
},
firstDelayedRedraw=()=>{
	setTimeout(reDrawVfov,2e3)
},
document.getElementById("fdb-mosOverlap").addEventListener("input",(function(e){
	setOverlap(this.value)
})),
document.getElementById("mosWnum").onchange=e=>{
	mosaicSettings.Wnum=e.srcElement.value,
	updateMosaicTiles()
},
document.getElementById("mosHnum").onchange=e=>{
	mosaicSettings.Hnum=e.srcElement.value,
	updateMosaicTiles()
},
setOverlap=val=>{
	document.getElementById("overlapVal").textContent=val+" %",
	mosaicSettings.Overlap=val,
	reDrawVfov(),
	saveLocalStorageMosaic()
},
saveLocalStorageMosaic=()=>{
	localStorage.setItem("mosdata",JSON.stringify(mosaicSettings))
},
getLocalStorageMosaic=()=>{
	let tempmos=JSON.parse(localStorage.getItem("mosdata"));
	"mosdata"in localStorage&&(mosaicSettings=tempmos),
	updateMosaicInterface()
},
updateMosaicTiles=()=>{
	vFoVStart(),
	saveLocalStorageMosaic()
},
$(".advancedAngleSwitchInput").click((function(){
	mosaicSettings.angleAdj=this.checked,
	$(".advancedAngleSwitchInput").prop("checked",mosaicSettings.angleAdj),
	updateMosaicTiles()
})),
document.getElementById("resetMOS").onclick=e=>{
	resetMosaic()
},
resetMosaic=()=>{
	mosaicSettings.Hnum=1,
	mosaicSettings.Wnum=1,
	mosaicSettings.Overlap=15,
	mosaicSettings.angleAdj=!1,
	updateMosaicTiles(),
	updateMosaicInterface()
},
setNewValuesMosaic=(hnum,wnum,overlap,angleadj)=>{
	mosaicSettings.Hnum=hnum,
	mosaicSettings.Wnum=wnum,
	mosaicSettings.Overlap=overlap,
	mosaicSettings.angleAdj=JSON.parse(angleadj),
	updateMosaicTiles(),
	updateMosaicInterface()
},
updateMosaicInterface=()=>{
	document.getElementById("fdb-mosOverlap").value=mosaicSettings.Overlap,
	document.getElementById("overlapVal").textContent=mosaicSettings.Overlap+" %",
	document.getElementById("mosWnum").value=mosaicSettings.Wnum,
	document.getElementById("mosHnum").value=mosaicSettings.Hnum,
	$(".advancedAngleSwitchInput").prop("checked",mosaicSettings.angleAdj)
},
handleProfileAlert=()=>{
	null!=connectedProfileName&&(actualCcdData.DX==connectedCcdData.DX&&actualCcdData.DY==connectedCcdData.DY&&actualCcdData.PixelSize==connectedCcdData.PixelSize&&actualCcdData.Focallen==connectedCcdData.Focallen?(sameFov=!0,showHideAlertProfile()):(sameFov=!1,showHideAlertProfile()))
},
showHideAlertProfile=()=>{
	sameFov?(document.getElementById("alertFovDiv").classList.remove("d-block"),document.getElementById("alertFovDiv").classList.add("d-none")):(document.getElementById("alertFovDiv").classList.add("d-block"),document.getElementById("alertFovDiv").classList.remove("d-none"))
},
createAlertFov=()=>{
	var alFovDiv=document.createElement("div"),
		referenceNode;
	alFovDiv.id="alertFovDiv",
	alFovDiv.classList.add("d-none"),
	alFovDiv.innerHTML="Current FoV Profile is different from the one selected in Voyager",
	document.querySelector(".aladin-fov").after(alFovDiv)
},
chkIfMos=()=>{
	let isMos;
	return mosaicSettings.Wnum>1||mosaicSettings.Hnum>1
},
moreInfoRotAdjXp=()=>{
	$("#moreInfoRotBtn").html((function(){
		var collapse="More info about Rotation adjust",
			expand="Close info";
		return $("#rotationAdjDesc").is(":visible")?collapse:expand
	}))
},
showMosListPanel=bool=>{
	bool?$("#csvListCont, #csvCard").removeClass("offscreen"):$("#csvListCont, #csvCard").addClass("offscreen")
},
document.getElementById("moreInfoRotBtn").addEventListener("click",moreInfoRotAdjXp),
document.getElementById("closeTileListBtn").addEventListener("click",(function(){
	showMosListPanel(!1)
})),
stopConnectingStatusForAbort=()=>{},
invertColor=hex=>{
	if(0===hex.indexOf("#")&&(hex=hex.slice(1)),3===hex.length&&(hex=hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]),6!==hex.length)
		throw new Error("Invalid HEX color.");
	var r=(255-parseInt(hex.slice(0,2),16)).toString(16),
		g=(255-parseInt(hex.slice(2,4),16)).toString(16),
		b=(255-parseInt(hex.slice(4,6),16)).toString(16);
	return"#"+padZeroStr(r)+padZeroStr(g)+padZeroStr(b)
},
setcolorContrast=hexcolor=>{
	var r,g,b,yiq;
	return"#"===hexcolor.slice(0,1)&&(hexcolor=hexcolor.slice(1)),3===hexcolor.length&&(hexcolor=hexcolor.split("").map((function(hex){return hex+hex})).join("")),(299*parseInt(hexcolor.substr(0,2),16)+587*parseInt(hexcolor.substr(2,2),16)+114*parseInt(hexcolor.substr(4,2),16))/1e3>=128?"black":"white"
},
getTcpPort=()=>{
	let portSelect=document.getElementById("ipPort"),
		tcpPort;
	return portSelect.options[portSelect.selectedIndex].value
},
getWs_protocol=()=>{
	let checkBox,wssProt;
	return document.getElementById("wssCheck").checked?"wss://":"ws://"
},
onMessage=evt=>{
	try{
		var JSONobj=JSON.parse(evt.data.replace(/\bNaN\b/g,"null"))
	}
	catch(e){
		errorFire(e,"JSON parse error")
	}
	"Polling"!==JSONobj.Event&&readJson(JSONobj)
},
getUrlParam=paramName=>{
	var result=null,tmp=[];
	return location.search.substr(1).split("&").forEach((function(item){
		(tmp=item.split("="))[0]===paramName&&(result=decodeURIComponent(tmp[1]))
	})),result
},
checkParamPort=()=>{
	let tmpParam=getUrlParam("port"),
		portSelect=document.getElementById("ipPort");
	if(tmpParam&&"undefined"!=tmpParam){
		var opt=document.createElement("option");
		opt.appendChild(document.createTextNode(tmpParam)),
		opt.value=tmpParam,portSelect.appendChild(opt),
		portSelect.value=tmpParam
	}
},
checkParamWssSwitch=()=>{
	let tmpParam=getUrlParam("ssl"),
		checkBox=document.getElementById("wssCheck");
	checkBox.checked=1==tmpParam
},
checkParamSimbadPointer=()=>{
	let tmpParam=getUrlParam("s_pointer");
	simbadPointer=1==tmpParam
},
void 0===Number.prototype.toRad&&(Number.prototype.toRad=function(){
	return this*Math.PI/180
}),
void 0===window.fovReqAnim){
	for(var lastTime=0,vendorsR=["r","msR","mozR","webkitR","oR"],vendorsC=["c","msC","mozC","webkitC","oC"],x=0;x<vendorsR.length&&void 0===window.fovReqAnim;++x)
		window.fovReqAnim=window[vendorsR[x]+"equestAnimationFrame"],window.fovCanAnim=window[vendorsC[x]+"ancelAnimationFrame"]||window[vendorsC[x]+"ancelRequestAnimationFrame"];
	void 0!==window.fovReqAnim&&void 0!==window.fovCanAnim||(window.fovReqAnim=function(callback){
		var currTime=(new Date).getTime(),
			timeToCall=Math.max(0,16-(currTime-lastTime)),
			id=window.setTimeout((function(){callback(currTime+timeToCall)}),timeToCall);
		return lastTime=currTime+timeToCall,id
	},
	window.fovCanAnim=function(id){
		clearTimeout(id)
	})
}
void 0===Number.prototype.getSign&&(Number.prototype.getSign=function(){
	return this>0?1:this<0?-1:1
}),
void 0===Number.prototype.toTrunc&&(Number.prototype.toTrunc=function(){
	return Math[this>0?"floor":"ceil"](this)
});
var virtualFoV=[],
	vFoVdata=[],
	vFoVfrm=0;
function voyFoVInit(){
	function getFovDataVoy(){
		this.fovWidth=fovdata.fovx,
		this.fovHeight=fovdata.fovy,
		this.fovMax=!0,
		this.fovNotes=!0,
		this.fovColour="#ff0000",
		this.fovRotation=-fovdata.pAng
	}
	this.fovWidth="",
	this.fovHeight="",
	this.fovMax=!0,
	this.fovNotes=!0,
	this.fovColour="#ffffff",
	this.fovRotation=0,
	this.fovAppH=0,
	this.fovAppV=0,
	this.fovScopeRes=0,
	this.compDesc="",
	this.compDisplay=!0,
	this.searchTarget="",
	this.searchPopular="",
	this.searchSurveySelection="P/DSS2/color-m",
	this.getFovDataVoy=getFovDataVoy
}
void 0===Aladin.prototype.addCanvas&&(Aladin.prototype.addCanvas=function(canvId){
	var fovCanvas=document.createElement("canvas");
	fovCanvas.id=canvId,
	fovCanvas.width=aladin.getSize()[0],
	fovCanvas.height=aladin.getSize()[1],
	fovCanvas.style.zIndex=2,
	fovCanvas.style.position="absolute",
	fovCanvas.style.left=0,
	fovCanvas.style.top=0,
	$("#"+this.aladinDiv.id).append(fovCanvas),
	this.hasOwnProperty("ctx")||(this.ctx=[]),
	this.ctx[canvId]=$("#"+fovCanvas.id)[0].getContext("2d"),
	this.ctx[canvId].translate(this.getSize()[0]/2,
	this.getSize()[1]/2)
}),
void 0===Aladin.prototype.resizeCanvas&&(Aladin.prototype.resizeCanvas=function(canvId){
	this.ctx[canvId].setTransform(1,0,0,1,0,0),
	this.ctx[canvId].canvas.width=this.getSize()[0],
	this.ctx[canvId].canvas.height=this.getSize()[1],
	this.ctx[canvId].translate(this.getSize()[0]/2,this.getSize()[1]/2)
}),
void 0===Aladin.prototype.removeCanvas&&(Aladin.prototype.removeCanvas=function(canvId){
	$("#"+canvId).remove(),delete this.ctx[canvId]
}),
void 0===Aladin.prototype.progressiveFov&&(Aladin.prototype.progressiveFov=function(requiredFov,smaller){
	for(this.setFov(requiredFov);smaller?this.getFov()[0]>requiredFov:this.getFov()[0]<requiredFov;)
		this.decreaseZoom(1)
});
var IDcounter=0;
function generateID(){
	return IDcounter<=1e4?IDcounter++:IDcounter=1,IDcounter
}
function generateUID(){
	var result="",i,j;
	for(j=0;j<32;j++)
		8!=j&&12!=j&&16!=j&&20!=j||(result+="-"),result+=i=Math.floor(16*Math.random()).toString(16).toUpperCase();
	return result
}
var uidList={};
function pushUid(name,Uid){
	uidList[Uid]=name
}
function removeUid(Uid){
	delete uidList[Uid],
	callBack(Uid)
}
function callBack(Uid){}
var signalCodes={
	1:"Autofocus Error",
	2:"Remote Action RUN - Running Queue is empty",
	3:"Remote Action RUN - SC ARRAY Autofocus all nodes",
	4:"Remote Action RUN - Precise Pointing",
	5:"Remote Action RUN - Autofocus",
	6:"Remote Action RUN - SC ARRAY AutoFlat single node",
	7:"Remote Action RUN - SC ARRAY Autofocus single node",
	8:"Remote Action RUN - SC ARRAY Connect Setup all nodes",
	9:"Remote Action RUN - SC ARRAY Disconnect Setup all nodes",
	10:"Remote Action RUN - SC ARRAY Filter Change single node",
	11:"Remote Action RUN - SC ARRAY Get Actual Filter single node",
	12:"Remote Action RUN - SC ARRAY Focuser Move To single node",
	13:"Remote Action RUN - SC ARRAY Focuser Offset single node",
	14:"Remote Action RUN - SC ARRAY Rotator Move single node",
	15:"Remote Action RUN - Setup Connect",
	16:"Remote Action RUN - Setup Disconnect",
	18:"Remote Action RUN - Camera Shot",
	19:"Remote Action RUN - CCD Cooling",
	20:"Remote Action RUN - Focuser Move To",
	21:"Remote Action RUN - Focuser OffSet",
	22:"Remote Action RUN - Rotator Goto",
	23:"Remote Action RUN - AutoFlat",
	24:"Remote Action RUN - Filter Change To",
	25:"Remote Action RUN - Plate Solving Actual Location",
	26:"Remote Action RUN - SC ARRAY Sequence",
	27:"Remote Action RUN – SC ARRAY Create Directory on FileSystem single node",
	28:"Remote Action RUN – SC ARRAY CCD Cooling single node",
	29:"Remote Action RUN - SC ARRAY Get CCD Temperature single node",
	30:"Remote Action RUN - SC ARRAY Camera Shot single node",
	31:"Remote Action RUN - Telescope Goto",
	32:"Remote Action RUN - Run External Script/Application",
	33:"Remote Action RUN - SC ARRAY AutoFocus all node with LocalField method",
	34:"Remote Action RUN - SC ARRAY AutoFocus single node with LocalField method",
	500:"VOYAGER General STATUS - Error (some error from action or thread raised)",
	501:"VOYAGER General STATUS - Idle (nothing to do ready to work)",
	502:"VOYAGER General STATUS - Action Running",
	503:"VOYAGER General STATUS - Action Stopped",
	504:"VOYAGER General STATUS - Undefined (just started Voyager … nothing defined)",
	505:"VOYAGER General STATUS - Warning (some minor error from action or thread raised)",
	506:"VOYAGER General STATUS - Unknow (Internal Automa cannot understand what asked to Voyager)"
},
actionResultCodes={
	0:"NEED INIT Wait to Running",
	1:"READY Ready to Running",
	2:"RUNNING Running",
	3:"PAUSE Paused",
	4:"OK Finished",
	5:"FINISHED ERROR Finished with Error",
	6:"ABORTING Abort request waiting during running",
	7:"ABORTED Finished aborted",
	8:"TIMEOUT Finished timeout",
	9:"TIME END Finished for timer end",
	10:"OK PARTIAL FInished with some task not executed"
},
voyStatusCodes={
	0:"STOPPED - Voyager is not connected with setup some actions cannot work",
	1:"IDLE - Voyager can run action, actually is in idle",
	2:"RUN - Voyager is running an action",
	3:"ERROR - Voyager is in idle but last action finished with error",
	4:"UNDEFINED - Voyager status cannot be determined",
	5:"WARNING - Voyager is in idle but last action finished with a warning"
},
shotStatusCodes={
	0:"IDLE - No Exposure",
	1:"EXPOSE - Exposing",
	2:"DOWNLOAD - Download running from camera to PC",
	3:"WAIT_JPG - Process to create a JPG for preview",
	4:"ERROR - Camera Error, shot is aborted"
},
coolerStat={
	0:"INIT Voyager application is initializing then Camera Control",
	1:"UNDEF Status not recognized",
	2:"NO COOLER No cooler for this camera",
	3:"OFF Cooler Off",
	4:"COOLING Cooling running",
	5:"COOLED Cooled",
	6:"TIMEOUT COOLING",
	7:"WARMUP RUNNING Warmup Running",
	8:"WARMUP END Warmup Finished",
	9:"ERROR"
},
logType={
	1:"DEBUG",
	2:"INFO",
	3:"WARNING",
	4:"CRITICAL",
	5:"TITLE",
	6:"SUBTITLE",
	7:"EVENT",
	8:"REQUEST",
	9:"EMERGENCY"
},
logColors={
	1:"silver-log",
	2:"lime-log",
	3:"gold-log",
	4:"lightcoral-log",
	5:"gray-log",
	6:"lightskyblue-log",
	7:"violet-log",
	8:"aquamarine-log",
	9:"orange-log"
};
function VersionRec(JSONobj){
	InstJ!==JSONobj.Inst&&(InstJ=JSONobj.Inst),
	voyVer!==JSONobj.VOYVersion&&(voyVer=JSONobj.VOYVersion),
	versionNotSupported("2.2.10",voyVer)&&errorFire("Sorry but the version of Voyager you are using is older than <strong>2.2.10</strong> (the minimum recommended version). <br> To take full advantage of all the features of the Dashboard we highly recommend updating Voyager to the latest version available.<br><strong>If you continue with your version, the Dashboard may not work partially or totally.</strong>","Voyager Version not Supported"),
	$("#voyver").text("Voyager Connected - "+voyVer),
	StartHeartBeat(pollingInterval),
	setStatusLedOn("connStatus"),
	setBtnActive("#startupConn, #profileListtBtn")
}
function signalReceived(code){}
function logEventReceived(msg){
	$("#logDiv > span").length>500&&$(".logContRow:last").remove();
	var type=msg.Type,
		text=msg.Text.replace(/(?:\r\n|\r|\n)/g,"<br>");
	writeToLog(timeStampUtility(msg.TimeInfo)+" &emsp;<span class='logMsgType "+logColors[type]+"'>[ "+logType[type]+" ]</span> &emsp; "+text),
	5!==type&&6!==type||($("#generalActionText").text(msg.Text),showStatusBar(msg.Text))
}
function remoteSetupConnected(){
	startupConnected=!0,
	setTimeout(getFilterConfiguration,500),
	$("#startupConn").html("Connected").removeClass("disabled").addClass("btn-success"),
	setBtnActive("#startupDisConn, #abortAllBtn, #haltAllBtn"),
	setBtnNotActive("#profileListtBtn"),
	$("#startupConn").css("pointer-events","none"),
	$("#startupConnLed").hasClass("ledgreen")||$("#startupConnLed").addClass("ledgreen")
}
function remoteSetupTimedOut(){
	errorFire("Remote Setup Connection TimedOut! Please check Voyager."),
	remoteSetupBtnReset()
}
function remoteSetupError(name,msg){
	errorFire(name+": "+msg+" Please check Voyager and Setup connections."),
	remoteSetupBtnReset()
}
function remoteSetupDisconnected(){
	remoteSetupBtnReset(),
	setInitialBtnActive(),
	setBtnActive(".lev1active"),
	stopAnimLogo(),
	hideStatusBar()
}
function remoteSetupBtnReset(){
	$("#startupConn").html("Connect").removeClass("disabled").removeClass("btn-success"),
	setBtnNotActive("#startupDisConn"),
	setBtnActive("#profileListtBtn"),
	$("#startupConn").css("pointer-events","auto"),
	resetEnvironmentData(),
	startupConnected=!1,
	$("#startupConnLed").hasClass("ledgreen")&&$("#startupConnLed").removeClass("ledgreen")
}
function remoteSetupBtnResetAbort(){
	startupConnected||remoteSetupBtnReset()
}
function remoteCameraShotOk(){
	imgShooting=!1,
	resetShotPanel()
}
function remoteSetLogEventReceived(){
	setTimeout(getVoyagerProfiles(!0),400),
	getProfileName()
}
function newFitReadyReceived(){
	imgShooting=!1
}
function remoteCameraShotError(msg){
	errorFire("RemoteCameraShot error: "+msg),
	imgShooting=!1,
	resetShotPanel(),
	loadingOverlayRemove()
}
function remoteCameraShotAborting(){}
function remoteCameraShotAborted(){
	imgShooting=!1,resetShotPanel(),
	errorFire("RemoteCameraShot Aborted ","Shot Aborted!")
}
function controlDataReceived(msg){
	if(ccdConnected=msg.CCDCONN,
		planConnected=msg.PLACONN,
		ccdCoolerOn=msg.CCDCOOL,
		guideConnected=msg.GUIDECONN,
		autofocusConnected=msg.AFCONN,
		setupconn=msg.SETUPCONN,
		plateSolveConnected=msg.PSCONN,
		mountTracking=msg.MNTTRACK,
		mountParked=msg.MNTPARK,
		mountFlip=msg.MNTTFLIP,
		mountSlew=msg.MNTSLEW,
		focuserTemp=msg.AFTEMP,
		focuserPosition=msg.AFPOS,
		ccdStatus=msg.CCDSTAT,
		$("#generalStatusText").text(voyStatusCodes[msg.VOYSTAT]),
		2===msg.VOYSTAT?(voyIsRunning||(voyIsRunning=!0,disableActions(),animLogo(),""==$("#generalActionText").text()&&$("#generalActionText").text("Wait info about action running")),voyIsRunning=!0):(voyIsRunning&&(voyIsRunning=!1,$("#generalActionText").text("No action running"),stopAnimLogo(),voyIsRunning||enableActions()),hideStatusBar(),voyIsRunning=!1),
		$("#runSeqText, #seqRunTextTop").text(msg.RUNSEQ),
		$("#seqDSTextTop").text(msg.RUNDS),
		""!=msg.RUNSEQ?($("#seqStartTime").text(msg.SEQSTART),
		$("#seqRemain").text(msg.SEQREMAIN),
		$("#seqEndTime").text(msg.SEQEND),
		$("#seqRunli").addClass("d-flex").removeClass("d-none")):(
			$("#seqStartTime").text(""),
			$("#seqRemain").text(""),
			$("#seqEndTime").text(""),
			$("#seqRunli").addClass("d-none").removeClass("d-flex")
		),
		""!=msg.RUNDS?($("#dsRunli").addClass("d-flex").removeClass("d-none"),
		$("#dragRunnTextTop").text(msg.RUNDS)):$("#dsRunli").addClass("d-none").removeClass("d-flex"),
		mountConnected!==msg.MNTCONN&&(
			mountConnected=msg.MNTCONN,
			$(".mount-btn-noact").toggleClass("disabled")
		),
		mountConnected?($("#mountStatLed").hasClass("ledgreen")||($("#mountStatLed").addClass("ledgreen"),$("#simulatorSelected").removeAttr("disabled")),voyIsRunning||setBtnActive(".mount-btn"),$("#mntRA").text(msg.MNTRA),$("#mntDEC").text(msg.MNTDEC),$("#mntAZ").text(msg.MNTAZ),$("#mntALT").text(msg.MNTALT),$("#mntPier").text(msg.MNTPIER),$("#mntFlip").text(msg.MNTTFLIP),$("#TI").text(msg.TI),tempRaRec=msg.MNTRAJ2000,tempDecRec=msg.MNTDECJ2000):(
			$("#mountStatLed").hasClass("ledgreen")&&($("#mountStatLed").removeClass("ledgreen"),
			$("#simulatorSelected").attr("disabled",!0)),
			$("#mntRA").text(""),
			$("#mntDEC").text(""),
			$("#mntAZ").text(""),
			$("#mntALT").text(""),
			$("#mntPier").text(""),
			$("#mntFlip").text(""),
			$("#TI").text(""),
			$("#parkStatText").text(""),
			setBtnNotActive(".mount-btn")
		),
		plateSolveConnected?voyIsRunning||setBtnActive(".solve-btn"):setBtnNotActive(".solve-btn"),
		ccdConnected?($("#ccdStatLed").hasClass("ledgreen")||$("#ccdStatLed").addClass("ledgreen"),
		$(".coolerBtn").hasClass("disabled")&&!voyIsRunning&&setBtnActive(".coolerBtn, .seq-btns, #remoteShotbtn")):($("#ccdStatLed").hasClass("ledgreen")&&$("#ccdStatLed").removeClass("ledgreen"),shotBtnReset(),setBtnNotActive("#remoteShotbtn,.coolerBtn,.seq-btns")),
		planConnected?($("#planStatLed").hasClass("ledgreen")||$("#planStatLed").addClass("ledgreen"),voyIsRunning||setBtnActive(".searchBtn")):($("#planStatLed").hasClass("ledgreen")&&$("#planStatLed").removeClass("ledgreen"),setBtnNotActive(".searchBtn")),
		setupconn&&!startupConnected?remoteSetupConnected():!setupconn&&startupConnected&&remoteSetupDisconnected(),
		ccdConnected?($("#coolerStatus").text(coolerStat[ccdStatus]),addDataTemp(msg.CCDTEMP,msg.CCDPOW,msg.CCDSETP)):$("#coolerStatus").text(""),
		mountConnected&&mountParked?$("#parkStatText").text("PARKED").removeClass("text-danger text-success text-primary text-warning").addClass("text-danger"):mountConnected&&mountSlew?$("#parkStatText").text("SLEWING").removeClass("text-danger text-success text-primary text-warning").addClass("text-primary"):mountConnected&&mountTracking?$("#parkStatText").text("TRACKING").removeClass("text-danger text-success text-primary text-warning").addClass("text-success"):!mountConnected||mountTracking||mountParked||mountSlew||$("#parkStatText").text("STOPPED").removeClass("text-danger text-success text-primary text-warning").addClass("text-warning"),
		updateChartSeq("#seqChart",getPercent(msg.SEQPARZ,msg.SEQTOT)),
		msg.GUIDECONN
	){
		let x=secondDecimal(msg.GUIDEX),
			y=secondDecimal(msg.GUIDEY);
		addDataguide(x,y),
		$("#xErrGuide").text(secondDecimal(x)),
		$("#yErrGuide").text(secondDecimal(y)),
		$("#guideStatLed").hasClass("ledgreen")||$("#guideStatLed").addClass("ledgreen")
	}else 
		$("#guideStatLed").hasClass("ledgreen")&&$("#guideStatLed").removeClass("ledgreen"),$("#xErrGuide").text(""),$("#yErrGuide").text("");
	msg.AFCONN?($("#focusTemp").text(msg.AFTEMP),
	$("#focusPosition").text(msg.AFPOS),
	$("#focusStatLed").hasClass("ledgreen")||($("#focusStatLed").addClass("ledgreen"),$("#afInjBtn").hasClass("disabled")&&setBtnActive("#afInjBtn"))):($("#focusStatLed").hasClass("ledgreen")&&$("#focusStatLed").removeClass("ledgreen"),$("#focusTemp").text(""),$("#focusPosition").text(""))
}
function updateChartSeq(chartId,percent){
	$(chartId).data("easyPieChart").update(percent)
}
function updateFilterSelect(paramRet){
	let filterCamera,
		filterFocus="#filterSelectFocus";
	populateFilterSelectRoutine(paramRet,"#filterSelect"),
	populateFilterSelectRoutine(paramRet,filterFocus),
	populateFilterListArray(paramRet),
	getActualFilter(),
	setTimeout(getEnvironmentData,500)
}
function updateFilterActual(paramRet){
	updateFilterActualRoutine(paramRet,"#filterSelect"),
	updateFilterActualRoutine(paramRet,"#filterSelectFocus")
}
function newJPGReadyReceived(msg){
	imgShooting=!1,
	resetShotPanel(),
	loadImg64(msg.Base64Data,msg.PixelDimX,msg.PixelDimY);
	var imgObj={};
	""===msg.SequenceTarget?($("#SequenceTarget").text("No Target"),imgObj.Target="No Target"):($("#SequenceTarget").text(msg.SequenceTarget),imgObj.Target=msg.SequenceTarget),
	$("#Bin").text(msg.Bin),
	$("#StarIndex").text(msg.StarIndex),
	$("#HFD").text(msg.HFD),
	$("#Expo").text(msg.Expo),
	imgObj.Bin=msg.Bin,
	imgObj.StarIndex=msg.StarIndex,
	imgObj.HFD=msg.HFD,
	imgObj.Expo=msg.Expo,
	imgObj.Time=timeStampUtility(msg.TimeInfo),
	imgObj.NameFile=extractNamefile(msg.File),
	"** BayerMatrix **"===msg.Filter?($("#Filter").text("No Filter"),imgObj.Filter="No Filter"):($("#Filter").text(msg.Filter),imgObj.Filter=msg.Filter),
	imageStatsArrayAdd(imgObj)
}
function loadImg64(img64str,dimX,dimY){
	var inImageStr,
		image64="data:image/jpeg;base64,"+img64str;
	$("#img_preview").attr("src",image64),$("#img_preview_a").attr("href",image64);
	var sizePx=dimX+"x"+dimY;
	document.querySelector("#img_preview_a").setAttribute("data-size",sizePx),
	loadingOverlayRemove(),
	connected&&$("#cameraStatus").text("IDLE")
}
function animatePreDownload(){
	$("#animBar").animate({opacity:"+=1"},500),
	$("#animBar").animate({opacity:"-=0.9"},1e3,animatePreDownload)
}
function stopAnimatePreDownload(){
	progBarStopAndReset()
}
function resetShotPanel(){
	shotBtnReset(),
	setBtnNotActive("#remoteShotAbortbtn"),
	stopAnimatePreDownload(),
	$("#cameraStatus").text(""),
	resetShotInfo()
}
function arrayElementDataReceived(msg){}
function shotRunningReceived(msg){
	switch(updateChartSeq("#singleShotChart",msg.ElapsedPerc),progBarPerc(msg.ElapsedPerc),populateShotInfo(msg),msg.Status){
		case 0:
			stopAnimatePreDownload(),
			shotBtnReset(),
			imgShooting=!1;
			break;
		case 1:
			imgShooting||(shotBtnShooting(),imgShooting=!0);
			break;
		case 2:
			animatePreDownload();
			break;
		case 3:
			imagePreviewLoading(),
			stopAnimatePreDownload(),
			shotBtnReset(),
			imgShooting=!1;
			break;
		case 4:
			resetShotPanel(),
			stopAnimatePreDownload(),
			loadingOverlayRemove(),
			imgShooting=!1,
			errorFire(shotStatusCodes[msg.Status]);
			break;
		default:
			imgShooting=!1,
			resetShotPanel(),
			stopAnimatePreDownload(),
			loadingOverlayRemove()
	}
	cameraStatus=shotStatusCodes[msg.Status],
	$("#cameraStatus").text(cameraStatus)
}
function remoteSearchReceived(ParamRet){
	switch(ParamRet.Result){
		case 0:
			errorFire("Search term not found");
			break;
		case 1:
			$("#nameToSearch").val(ParamRet.Name),
			$("#raSearch").val(ParamRet.RAJ2000),
			$("#decSearch").val(ParamRet.DECJ2000),
			ParamRet.Info.length>0&&populateInfo(ParamRet.Info);
			break;
		case 2:
			errorFire(ParamRet.LastError),
			resetSearchField()
	}
}
function remoteSearchReceivedFinishedError(motivo){
	errorFire(motivo,"Remote search Error!"),
	resetSearchField()
}
function populateInfo(info){
	$(".obj-data-item").remove(),
	info.forEach(element=>{
		$("#obj-data-cont").append('<div class="obj-data-item d-flex align-items-center justify-content-between col py-1"><span class="itemTitle text-muted px-1">'+element.Key+'</span><span class="itemDescr px-1">'+element.Value+"</span></div>")
	}),
	$("#cont-detail-obj").removeClass("d-none")
}
function remoteEnvironmentDataReceived(ParamRet){
	for(var k in ParamRet)
		""!==ParamRet[k]&&$("#envUl").append('<li class="list-group-item bg-dark d-flex align-items-center justify-content-between env-element-li" id="li_env_'+k+'"><span class="text-muted info-data-item text-uppercase" id="tit_env_'+k+'">'+k+'</span><span class="environmentField info-data-item text-right" id="text_env_'+k+'">'+ParamRet[k]+"</span></li>");
	$("#tit_env_Profile, #text_env_Profile").addClass("text-warning"),
	$("#li_env_Profile").addClass("evid_bkg");
	let profileName=$("#text_env_Profile").text();
	""!=profileName&&$("#selectedProfile").text(profileName)
}
function remoteSetDashBoardModeOk(){
	remoteSetLogEventReq()
}
function StartHeartBeat(pollingInterval){
	heartBeat=setInterval(HeartBeat,1e3*pollingInterval)
}
function HeartBeat(){
	doSend(pollingGenMsg())
}
function pollingGenMsg(){
	var pollingJSONstr;
	return JSON.stringify({
		Event:"Polling",
		Timestamp:(new Date).getTime()/1e3|0,
		Host:HostJ,
		Inst:InstJ
	})
}
function startupConnect(){
	var Req={
		method:"RemoteSetupConnect",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.TimeoutConnect=90,
	Req.id=generateID(),
	pushUid("RemoteSetupConnect",Req.params.UID),
	doSend(JSON.stringify(Req)),
	$("#startupConn").html('<span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>Connecting...').addClass("disabled"),
	setBtnNotActive("#profileListtBtn")
}
function getFilterConfiguration(){
	var Req={
		method:"RemoteGetFilterConfiguration",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteGetFilterConfiguration",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function getActualFilter(){
	var Req={
		method:"RemoteFilterGetActual",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteFilterGetActual",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function RemoteCameraShot(){
	var Req={
		method:"RemoteCameraShot",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.Expo=$("#timeShot").val(),
	Req.params.Bin=$("#binSelect").val(),
	Req.params.IsROI=!1,
	Req.params.ROITYPE=0,
	Req.params.ROIX=0,
	Req.params.ROIY=0,
	Req.params.ROIDX=0,
	Req.params.ROIDY=0,
	Req.params.FilterIndex=$("#filterSelect").val()-1,
	Req.params.ExpoType=0,
	Req.params.SpeedIndex=0,
	Req.params.ReadoutIndex=0,
	Req.params.IsSaveFile=!0,
	Req.params.FitFileName="%%fitdir%%\\RemoteSingleShot_"+getTimeString()+".fit",
	Req.params.Gain=$("#gainShot").val(),
	Req.params.Offset=$("#offsetShot").val(),
	Req.id=generateID(),
	pushUid("RemoteCameraShot",Req.params.UID),
	tempUIDshot=Req.params.UID,
	imgShooting=!0,
	doSend(JSON.stringify(Req)),
	shotBtnShooting(),
	setBtnActive("#remoteShotAbortbtn")
}
function abortRemoteAction(UID){
	var Req={
		method:"RemoteActionAbort",
		params:{}
	};
	Req.params.UID=UID,
	Req.id=generateID(),
	doSend(JSON.stringify(Req))
}
function remoteSetLogEventReq(){
	var Req={
		method:"RemoteSetLogEvent",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsOn=!0,
	Req.params.Level=remoteLogLevel,
	Req.id=generateID(),
	pushUid("RemoteSetLogEvent",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function progBar(seconds){
	var duration=1e3*seconds;
	$("#animBar").width(0),
	$("#animBar").animate({width:"100%"},duration,"linear",(function(){
		animatePreDownload()
	}))
}
function progBarPerc(perc){
	var percStr=perc+"%";
	$("#animBar").width(percStr),
	100==perc&&(animatePreDownload(),setBtnNotActive("#remoteShotAbortbtn"),shotBtnDownloading())
}
function progBarReset(){
	$("#animBar").width(0),
	$("#animBar").css("opacity","1"),
	updateChartSeq("#singleShotChart",0)
}
function progBarStopAndReset(){
	$("#animBar").stop(!0),
	progBarReset()
}
function shotBtnShooting(){
	$("#remoteShotbtn").html('<span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>Shooting...').addClass("disabled")
}
function shotBtnDownloading(){
	$("#remoteShotbtn").html('<span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>Downloading...')
}
function imagePreviewLoading(){
	$("#img_preview_a").append('<div class="mask pattern-9 flex-center" id="loadingOverlayImg"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>')
}
function loadingOverlayRemove(){
	$("#loadingOverlayImg").remove()
}
function shotBtnReset(){
	$("#remoteShotbtn").html('<i class="fas fa-camera mr-2"></i>Camera shot').removeClass("disabled")
}
function remoteSearchTarget(type){
	var Req={
		method:"RemoteSearchTarget",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.Name=$("#nameToSearch").val(),
	Req.params.SearchType=type.data.ident,
	Req.id=generateID(),
	pushUid("RemoteSearchTarget",Req.params.UID),
	tempUIDsearch=Req.params.UID,
	doSend(JSON.stringify(Req)),
	removeObjectDetail()
}
function resetField(evt){
	$(evt.data.ident).val("")
}
function resetSearchField(){
	$(".searchField").val(""),
	removeObjectDetail()
}
function removeObjectDetail(){
	$(".obj-data-item").remove(),
	$("#cont-detail-obj").addClass("d-none")
}
function getEnvironmentData(){
	var Req={
		method:"RemoteGetEnvironmentData",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteGetEnvironmentData",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function getProfileName(){
	var Req={
		method:"RemoteGetEnvironmentData",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("getProfileName",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function resetEnvironmentData(){
	$(".env-element-li").remove(),
	$("#cont-seq-list").addClass("d-none"),
	$("#selectedSeq").text(""),
	$("#cont-ds-list").addClass("d-none"),
	$("#selectedDs").text(""),
	stopAnimLogo()
}
function enableActions(){
	voyIsRunning||(
		btnTempActive.forEach((function(item){
			var id;""!=item.id&&setBtnActive("#"+item.id)
		})),
		$("body").css("cursor","default"),
		resetShotPanel()
	)
}
function disableActions(){
	if(voyIsRunning){
		var elements=document.querySelectorAll(".actBtn:not(.disabled)");
		btnTempActive.length=0,
		(btnTempActive=[].slice.call(elements)).forEach((function(item){
			var id;
			""!=item.id&&setBtnNotActive("#"+item.id)
		})),
		$("body").css("cursor","progress")
	}
}
function imageStatsArrayAdd(data){
	imageStats.length<8?imageStats.unshift(data):(imageStats.pop(),imageStats.unshift(data)),
	addDataImage(data.HFD,data.StarIndex),
	updateImageStatsTable()
}
function extractNamefile(str){
	var name;
	return str.slice(str.lastIndexOf("\\")+1)
}
function updateImageStatsTable(){
	$(".imgStatItem").remove(),
	imageStats.forEach(element=>{
		$("#imgStatsUl").append('<li class="list-group-item bg-dark d-flex align-items-center justify-content-between imgStatItem p-2"><span class="info-data-item extraSmallText col m-0 p-0">'+element.Time+'</span><span class="info-data-item extraSmallText col-2 m-0 p-0">'+element.Target+'</span><span class="info-data-item extraSmallText col-2 m-0 p-0">'+element.Filter+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+element.Bin+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+element.StarIndex+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+element.HFD+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+element.Expo+"</span></li>")
	})
}
function abortHaltAll(isHalt){
	var Req={
		method:"Abort",
		params:{}
	};
	Req.params.IsHalt=isHalt,
	Req.id=generateID(),
	doSend(JSON.stringify(Req)),
	remoteSetupBtnResetAbort()
}
function precisePointTarget(){
	var Req={
		method:"RemotePrecisePointTarget",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsText=!0,
	Req.params.RA=0,
	Req.params.DEC=0,
	Req.params.RAText=$("#raSearch").val(),
	Req.params.DECText=$("#decSearch").val(),
	Req.id=generateID(),
	pushUid("RemotePrecisePointTarget",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function precisePointTargetNumber(raDecNum){
	var Req={
		method:"RemotePrecisePointTarget",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsText=!1,
	Req.params.RA=parseFloat(raDecNum[0]),
	Req.params.DEC=parseFloat(raDecNum[1]),
	Req.params.RAText="",
	Req.params.DECText="",
	Req.id=generateID(),
	pushUid("RemotePrecisePointTarget",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function remotePrecisePointTargetOk(){}
function remotePrecisePointTargetError(msg){
	errorFire(msg)
}
function remoteCooling(obj){
	var Req={
		method:"RemoteCooling",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsSetPoint=obj.data.conf.setpoint,
	Req.params.IsCoolDown=obj.data.conf.cooldown,
	Req.params.IsASync=obj.data.conf.async,
	Req.params.IsWarmup=obj.data.conf.warmup,
	Req.params.IsCoolerOFF=obj.data.conf.cooleroff,
	Req.params.Temperature=$("#cameraTemp").val(),
	Req.id=generateID(),
	pushUid("RemoteCooling",Req.params.UID),
	doSend(JSON.stringify(Req))
}
sendRemoteDashboardMode=()=>{
	var Req={
		method:"RemoteSetDashboardMode",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsOn=!0,
	Req.id=generateID(),
	pushUid("RemoteSetDashboardMode",Req.params.UID),
	doSend(JSON.stringify(Req))
},
populateFilterSelectRoutine=(paramRet,selectId)=>{
	var dropdown=$(selectId);
	for(dropdown.empty(),dropdown.append('<option selected="true" disabled>Filter</option>'),i=1;i<=paramRet.FilterNum;i++){
		var filtername="Filter"+i+"_Name";
		dropdown.append($("<option></option>").attr("value",i).text(paramRet[filtername])),
		cameraFilterList.push(paramRet[filtername])
	}
	0==paramRet.FilterNum&&dropdown.append($("<option></option>").attr("value",1).text("No Filter"))
},
populateFilterListArray=paramRet=>{
	for(cameraFilterList=[],i=1;i<=paramRet.FilterNum;i++){
		var filtername="Filter"+i+"_Name";
		cameraFilterList.push(paramRet[filtername])
	}
},
updateFilterActualRoutine=(paramRet,selectId)=>{
	let dropdown=$(selectId);
	-1==paramRet.FilterIndex&&(paramRet.FilterIndex=0),
	dropdown.prop("selectedIndex",paramRet.FilterIndex+1)
},
populateShotInfo=msg=>{
	document.querySelector("#fileShotText").textContent=msg.File,
	document.querySelector("#expoText").textContent=msg.Expo,
	document.querySelector("#elapsedText").textContent=msg.Elapsed,
	document.querySelector("#remainText").textContent=msg.Expo-msg.Elapsed
},
resetShotInfo=()=>{
	var shInField;
	document.querySelectorAll(".shInField").forEach(field=>{field.textContent=""})
},
$("#startupConn").click(startupConnect),
startupDisconnectionReq=()=>{
	var Req={
		method:"RemoteSetupDisconnect",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.TimeoutDisconnect=90,
	Req.id=generateID(),
	pushUid("RemoteSetupDisconnect",Req.params.UID),
	doSend(JSON.stringify(Req))
},
getFilterConfigurationReceived=msg=>{
	updateFilterSelect(msg.ParamRet)
},
$("#remoteShotbtn").click(RemoteCameraShot),
$("#resetSearchBtn").click(resetSearchField),
$("#searchBtn").click({ident:0},remoteSearchTarget),
$("#searchBtnSimbad").click({ident:1},remoteSearchTarget),
getProfileNameReceived=ParamRet=>{
	updateActualProfile(ParamRet.Profile)
},
updateActualProfile=profName=>{
	actualProfileName=sanitizeProfileName(profName),
	connectedProfileName=actualProfileName,fovdata.profileName=actualProfileName,
	RemoteGetCCDSizeInfoEx()
},
sanitizeProfileName=str=>{
	let sanString;
	return str.replace(/\s+/g,"_")
},
$("#preciseGoTo").click((function(){
	""===$("#raSearch").val()&&""===$("#decSearch").val()?errorFire("Please insert RA and DEC J2000 coordinates or make a Search","Empty coords field"):precisePointTarget()
})),
$("#alaPreciseGoto").click((function(){
	raDec=aladin.getRaDec(),
	null==raDec[0]||null==raDec[1]?errorFire("Error: Please check Aladin coordinates"):(raDec[0]=raDec[0]/15,precisePointTargetNumber(raDec))
})),
$("#alaPreciseGotoText").click((function(){
	raDec=aladin.getRaDec(),
	null==raDec[0]||null==raDec[1]?errorFire("Error: Please check Aladin coordinates"):(raDec[0]=raDec[0]/15,precisePointTargetText(raDec))
}));
var coolerONdata={setpoint:!1,cooldown:!1,async:!0,warmup:!1,cooleroff:!1},
	coolerOFFdata={setpoint:!1,cooldown:!1,async:!0,warmup:!1,cooleroff:!0},
	setTempData={setpoint:!0,cooldown:!0,async:!0,warmup:!1,cooleroff:!1},
	warmUpData={setpoint:!1,cooldown:!1,async:!0,warmup:!0,cooleroff:!1},
	coolDownData={setpoint:!1,cooldown:!0,async:!0,warmup:!1,cooleroff:!1};
function showStatusBar(text){
	if(text!=genStatusText){
		genStatusText=text,
		null==text&&(text=stTextComp("Action running")),
		$("#statusBarTop").html(stTextComp(text));
		var h=$("#navbarVoyager").outerHeight(!0);
		$("#statusBarContainer").animate({top:h},"fast","swing")
	}
}
function hideStatusBar(){
	genStatusText="No action running",
	$("#statusBarTop").text(genStatusText),
	$("#statusBarContainer").delay(200).animate({top:"-10px"},"slow","swing")
}
function hideStatusBarSelf(){
	$("#statusBarContainer").delay(800).animate({top:"-10px"},"slow","swing")
}
function stTextComp(text){
	return text+='<div class="float-right "><i class="fas fa-spinner fa-pulse"></i></div>'
}
function remoteSequence(seqFile){
	var Req={
		method:"RemoteSequence",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.SequenceFile=seqFile,
	Req.params.StartFlag=0,
	Req.id=generateID(),
	pushUid("RemoteSequence",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function getSequenceList(){
	var Req={
		method:"RemoteGetListAvalaibleSequence",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteGetListAvalaibleSequence",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function getSequenceListReceivedOk(list){
	$(".seq-li").remove(),
	$("#cont-seq-list").removeClass("d-none"),
	list.length>0?list.forEach((function(seqItem){
		$("#seqUl").append('<li class="list-group-item bg-dark align-items-center seq-li"><div class="row w-100"><div class="info-data-item text-left px-1 col-11 my-auto">'+seqItem+'</div><div class="col-1 my-auto p-0"><button class="btn btn-sm btn-primary m-auto flex-end px-2 py-1 btSeqLi" type="button" name="'+seqItem+'">Select</button></div></div></li>')
	})):(errorFire("No Sequence file avaiable into the default folder!","Sequence Not Found"),$("#cont-seq-list").addClass("d-none"))
}
function getSequenceListReceivedError(motivo){
	efforFire(motivo,"Get Sequence list Error!"),
	$("#cont-seq-list").addClass("d-none")
}
function remoteDragScript(dsFile){
	var Req={
		method:"RemoteDragScript",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.DragScriptFile=dsFile,
	Req.params.StartNodeUID="",
	Req.id=generateID(),
	pushUid("RemoteDragScript",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function remoteGetListAvalaibleDragScript(){
	var Req={
		method:"RemoteGetListAvalaibleDragScript",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteGetListAvalaibleDragScript",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function getDsListReceivedOk(list){
	$(".ds-li").remove(),
	$("#cont-ds-list").removeClass("d-none"),
	list.length>0?list.forEach((function(dsItem){
		$("#dsUl").append('<li class="list-group-item bg-dark align-items-center seq-li"><div class="row w-100"><div class="info-data-item text-left px-1 col-11 my-auto">'+dsItem+'</div><div class="col-1 my-auto p-0"><button class="btn btn-sm btn-primary m-auto flex-end px-2 py-1 btDsLi" type="button" name="'+dsItem+'">Select</button></div></div></li>')
	})):(errorFire("No DragScript file avaiable into the default folder!","DragScript Not Found"),
	$("#cont-ds-list").addClass("d-none"))
}
function getDsReceivedError(motivo){
	efforFire(motivo,"Get DragScript list Error!"),
	$("#cont-ds-list").addClass("d-none")
}
function remoteMountFastCommand(type){
	if(null!==type){
		var Req={
			method:"RemoteMountFastCommand",
			params:{}
		};
		Req.params.UID=generateUID(),
		Req.params.CommandType=type,
		Req.id=generateID(),
		pushUid("RemoteMountFastCommand",Req.params.UID),
		doSend(JSON.stringify(Req))
	}
}
$("#coolerOnBtn").click({conf:coolerONdata},remoteCooling),
$("#coolerOffBtn").click({conf:coolerOFFdata},remoteCooling),
$("#setTempBtn").click({conf:setTempData},remoteCooling),
$("#warmupBtn").click({conf:warmUpData},remoteCooling),
$("#coolDownBtn").click({conf:coolDownData},remoteCooling),
$("#statusBarContainer").click((function(){hideStatusBarSelf()})),
$("#seqStartBtn").click((function(){
	var seq=$("#selectedSeq").text();
	""!=seq?remoteSequence(seq):errorFire("Please select Sequence file from list before.","Sequence Start Error")
})),
$("#seqListtBtn").click(getSequenceList),
$("#seqUl").on("click",".btSeqLi",(function(e){
	var name=e.target.name;
	$("#selectedSeq").text(name),
	$("#cont-seq-list").addClass("d-none")
})),
$("#dragStartBtn").click((function(){
	var ds=$("#selectedDs").text();
	""!=ds?remoteDragScript(ds):errorFire("Please select DragScript file from list before.","DragScript Start Error")
})),
$("#dragSelectBtn").click(remoteGetListAvalaibleDragScript),
$("#dsUl").on("click",".btDsLi",(function(e){
	var name=e.target.name;
	$("#selectedDs").text(name),
	$("#cont-ds-list").addClass("d-none")
}));
var mountButtons=document.querySelectorAll(".mount-btn");
mountButtons.forEach(mountbtn=>{
	mountbtn.addEventListener("click",e=>{
		remoteMountFastCommand(e.target.getAttribute("ct"))
	})
}),
remoteMountFastCommandreceived=()=>{},
remoteMountFastCommandError=(mot,cod)=>{
	errorFire(mot+" "+actionResultCodes[cod],"Remote action mount error")
},
$("#resetLog").click((function(){
	document.getElementById("logDiv").innerHTML=""
}));
var btnDub=document.querySelectorAll(".doubleConfirm");
function RemoteGetCCDSizeInfoEx(){
	var Req={
		method:"RemoteGetCCDSizeInfoEx",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteGetCCDSizeInfoEx",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function RemoteGetCCDSizeInfoReceived(obj){
	let textDesc;
	connectedCcdData=obj,
	renderFoV(obj),
	document.querySelector("#textSetupAladin").innerHTML="Profile FoV data selected: "+actualProfileName,
	$("#fdb-pAng").val(fovdata.pAng),
	$("#paInd").text(" "+fovdata.pAng+"°"),
	handleLocalStorageProfile(),
	handleProfileAlert()
}
function RemoteGetCCDSizeInfoError(msg){
	errorFire(msg)
}
function sendRemoteSolveAndSync(){
	var Req={
		method:"RemoteSolveActualPosition",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsBlind=blindsolve,
	Req.params.IsSync=!0,
	Req.id=generateID(),
	pushUid("sendRemoteSolveAndSync",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function sendRemoteSolveAndSyncReceived(obj){
	$("#solvedStatText").text(obj.IsSolved),
	obj.IsSolved?$("#solvedStatText").removeClass("text-warning").addClass("text-success"):($("#solvedStatText").removeClass("text-success").addClass("text-warning"),$("#solvedStatText").append(" - "+obj.LastError));
	let tempRa=obj.RA,
		tempDec=obj.DEC,
		tempPa=obj.PA;
	tempPa=tempPa.toFixed(1),
	tempPa<0&&(tempPa+=360),
	$("#solvRA").text(tempRa),
	$("#solvDEC").text(tempDec),
	$("#solvPA").text(tempPa)
}
function sendRemoteSolveNoSync(){
	var Req={
		method:"RemoteSolveActualPosition",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsBlind=blindsolve,
	Req.params.IsSync=!1,
	Req.id=generateID(),
	pushUid("sendRemoteSolveNoSync",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function sendRemoteSolveNoSyncReceived(obj){
	sendRemoteSolveAndSyncReceived(obj)
}
function sendRemoteSolveFov(){
	var Req={
		method:"RemoteSolveActualPosition",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsBlind=blindsolve,
	Req.params.IsSync=!1,
	Req.id=generateID(),
	pushUid("sendRemoteSolveFov",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function sendRemoteSolveFovReceived(obj){
	sendRemoteSolveAndSyncReceived(obj);
	let tempRa=obj.RA,
		tempDec=obj.DEC,
		tempPa=obj.PA;
	tempPa=tempPa.toFixed(1),
	tempPa<0&&(tempPa+=360),
	aladin.gotoRaDec(15*tempRa,tempDec),
	getCoordinateAladin(),
	$("#fdb-pAng").val(tempPa),
	$("#paInd").text(" "+tempPa+"°"),
	changePAng(tempPa),
	$("#inputsearch").val("")
}
function remoteSolveAndSyncError(mot,cod){
	errorFire(mot+" "+actionResultCodes[cod],"Remote action Solve error")
}
function toggleCollapsePlSolvRes(){
	$("#plSolveColl").collapse("toggle")
}
function readJson(msg){
	switch(msg.hasOwnProperty("jsonrpc")&&0!=msg.result&&errorFire(msg.error+"<br>error code: "+msg.code,"JsonRPC error"),msg.Event){
		case"Version":
			VersionRec(msg);
			break;
		case"Polling":
			break;
		case"Signal":
			signalReceived(msg.Code);
			break;
		case"NewFITReady":
			newFitReadyReceived(msg);
			break;
		case"NewJPGReady":
			newJPGReadyReceived(msg);
			break;
		case"ShutDown":
			break;
		case"RemoteActionResult":
			remoteActionResultReceived(msg);
			break;
		case"ArrayElementData":
			arrayElementDataReceived(msg);
			break;
		case"ControlData":
			controlDataReceived(msg);
			break;
		case"ShotRunning":
			shotRunningReceived(msg);
			break;
		case"LogEvent":
			logEventReceived(msg);
			break;
		case"AutoFocusResult":
			autoFocusResultReceived(msg);
			break;
		case"ProfileChanged":
			profileChangedReceived(msg);
			break;
		default:
			text="No value found"
	}"error"in msg&&errorFire(msg.error.message+" - id:"+msg.id)
}
function remoteActionResultReceived(msg){
	var resultText=actionResultCodes[msg.ActionResultInt],
		name=uidList[msg.UID];
	"RemoteSetupConnect"===name&&4===msg.ActionResultInt&&remoteSetupConnected(),
	"RemoteSetupConnect"===name&&5===msg.ActionResultInt&&remoteSetupError(name,resultText),
	"RemoteSetupConnect"===name&&8===msg.ActionResultInt&&remoteSetupTimedOut(),
	"RemoteSetupDisconnect"===name&&4===msg.ActionResultInt&&remoteSetupDisconnected(),
	"RemoteCameraShot"===name&&4===msg.ActionResultInt&&remoteCameraShotOk(),
	"RemoteCameraShot"===name&&5===msg.ActionResultInt&&remoteCameraShotError(resultText),
	"RemoteCameraShot"===name&&6===msg.ActionResultInt&&remoteCameraShotAborting(),
	"RemoteCameraShot"===name&&7===msg.ActionResultInt&&remoteCameraShotAborted(),
	"RemoteGetFilterConfiguration"===name&&4===msg.ActionResultInt&&getFilterConfigurationReceived(msg),
	"RemoteFilterGetActual"===name&&4===msg.ActionResultInt&&updateFilterActual(msg.ParamRet),
	"RemoteFilterChangeTo"===name&&4===msg.ActionResultInt&&getActualFilter(),
	"RemoteSearchTarget"===name&&4===msg.ActionResultInt&&remoteSearchReceived(msg.ParamRet),
	"RemoteSearchTarget"===name&&5===msg.ActionResultInt&&remoteSearchReceivedFinishedError(msg.Motivo),
	"RemoteGetEnvironmentData"===name&&4===msg.ActionResultInt&&remoteEnvironmentDataReceived(msg.ParamRet),
	"RemoteGetEnvironmentData"===name&&4!==msg.ActionResultInt&&errorFire("Remote GetEnvironmentData error Received: "+msg.Motivo,"Severe error!"),
	"getProfileName"===name&&4===msg.ActionResultInt&&getProfileNameReceived(msg.ParamRet),
	"getProfileName"===name&&4!==msg.ActionResultInt&&errorFire("Remote Get Profile Name error Received: "+msg.Motivo,"Severe error!"),
	"RemoteSetLogEvent"===name&&4===msg.ActionResultInt&&remoteSetLogEventReceived(),
	"RemoteSetDashboardMode"===name&&4===msg.ActionResultInt&&remoteSetDashBoardModeOk(),
	"RemoteSetDashboardMode"===name&&4!==msg.ActionResultInt&&errorFire("Remote Set Dashboard Mode Error Received: "+msg.Motivo,"Severe error!"),
	"RemotePrecisePointTarget"===name&&4===msg.ActionResultInt&&remotePrecisePointTargetOk(),
	"RemotePrecisePointTarget"===name&&5===msg.ActionResultInt&&remotePrecisePointTargetError(msg.Motivo),
	"RemoteGetListAvalaibleSequence"===name&&4===msg.ActionResultInt&&getSequenceListReceivedOk(msg.ParamRet.list),
	"RemoteGetListAvalaibleSequence"===name&&5===msg.ActionResultInt&&getSequenceListReceivedError(msg.Motivo),
	"RemoteGetListAvalaibleDragScript"===name&&4===msg.ActionResultInt&&getDsListReceivedOk(msg.ParamRet.list),
	"RemoteGetListAvalaibleDragScript"===name&&5===msg.ActionResultInt&&getDsListReceivedError(msg.Motivo),
	"RemoteGetCCDSizeInfoEx"===name&&4===msg.ActionResultInt&&RemoteGetCCDSizeInfoReceived(msg.ParamRet),
	"RemoteGetCCDSizeInfoEx"===name&&5===msg.ActionResultInt&&RemoteGetCCDSizeInfoError(msg.Motivo+" da GetCCDSize"),
	"RemoteMountFastCommand"===name&&4===msg.ActionResultInt?remoteMountFastCommandreceived():"RemoteMountFastCommand"===name&&4!=msg.ActionResultInt&&remoteMountFastCommandError(msg.Motivo,msg.ActionResultInt),
	"sendRemoteSolveAndSync"===name&&4===msg.ActionResultInt?sendRemoteSolveAndSyncReceived(msg.ParamRet):"sendRemoteSolveAndSync"===name&&4!=msg.ActionResultInt&&remoteSolveAndSyncError(msg.Motivo,msg.ActionResultInt),
	"sendRemoteSolveNoSync"===name&&4===msg.ActionResultInt?sendRemoteSolveNoSyncReceived(msg.ParamRet):"sendRemoteSolveNoSync"===name&&4!=msg.ActionResultInt&&remoteSolveAndSyncError(msg.Motivo,msg.ActionResultInt),
	"sendRemoteSolveFov"===name&&4===msg.ActionResultInt?sendRemoteSolveFovReceived(msg.ParamRet):"sendRemoteSolveFov"===name&&4!=msg.ActionResultInt&&remoteSolveAndSyncError(msg.Motivo,msg.ActionResultInt),
	"RemoteRoboClipGetTargetList"===name&&4===msg.ActionResultInt?RemoteRoboClipGetTargetListReceived(msg.ParamRet):"RemoteRoboClipGetTargetList"===name&4!=msg.ActionResultInt&&RemoteRoboClipGetTargetListReceivedError(msg.Motivo,msg.ActionResultInt),
	"RemoteRoboClipRemoveTarget"===name&&4===msg.ActionResultInt?remoteRoboClipRemoveTargetOkReceived(msg.ParamRet):"RemoteRoboClipRemoveTarget"===name&4!=msg.ActionResultInt&&remoteRoboClipRemoveTargetReceivedError(msg.Motivo,msg.ActionResultInt),
	"RemoteRoboClipUpdateTarget"===name&&4===msg.ActionResultInt?remoteRoboClipUpdateTargetOkReceived(msg.ParamRet):"RemoteRoboClipUpdateTarget"===name&4!=msg.ActionResultInt&&remoteRoboClipUpdateTargetReceivedError(msg.Motivo,msg.ActionResultInt),
	"RemoteRoboClipAddTarget"===name&&4===msg.ActionResultInt?remoteRoboClipAddTargetOkReceived(msg.ParamRet):"RemoteRoboClipAddTarget"===name&4!=msg.ActionResultInt&&remoteRoboClipAddTargetReceivedError(msg.Motivo,msg.ActionResultInt),
	"RemoteFocus"===name&&4===msg.ActionResultInt?remoteFocusReceivedOK(msg.ParamRet):"RemoteFocus"===name&4!=msg.ActionResultInt&&remoteFocusReceivedError(msg.Motivo,resultText),
	"RemoteFocuserMoveTo"===name&&4===msg.ActionResultInt?remoteFocuserMoveReceivedOK(msg.ParamRet):"RemoteFocuserMoveTo"===name&4!=msg.ActionResultInt&&remoteFocuserMoveReceivedError(msg.Motivo,resultText),
	"RemoteFocusInject"===name&&4===msg.ActionResultInt?RemoteFocusInjectReceivedOK(msg.ParamRet):"RemoteFocusInject"===name&4!=msg.ActionResultInt&&RemoteFocusInjectReceivedError(msg.Motivo,resultText),
	"RemoteGetVoyagerProfiles"===name&&4===msg.ActionResultInt?remoteGetVoyagerProfilesReceived(msg.ParamRet):"RemoteGetVoyagerProfiles"===name&4!=msg.ActionResultInt&&remoteGetVoyagerProfilesReceivedError(msg.Motivo,resultText),
	"RemoteGetVoyagerProfilesstartup"===name&&4===msg.ActionResultInt?remoteVoyagerProfileStartupReceived(msg.ParamRet):"RemoteGetVoyagerProfilesstartup"===name&4!=msg.ActionResultInt&&remoteGetVoyagerProfilesReceivedError(msg.Motivo,resultText),
	"RemoteSetProfile"===name&&4===msg.ActionResultInt?remoteSetProfileReceived(msg.ParamRet):"RemoteSetProfile"===name&4!=msg.ActionResultInt&&remoteSetProfileReceivedError(msg.Motivo,resultText),
	removeUid(msg.UID)
}
btnDub.forEach(item=>{
	item.addEventListener("click",e=>{
		doubleConfirmAction(e.currentTarget)
	})
}),
doubleConfirmAction=t=>{
	""!=t.id?modalDoubleWarnFire(t.innerHTML,t.value,t.id):errorFire("Error for confirm Action before send, id is null. Please report to Developer.","Action command send error.")
},
doubConfSecStep=(id,param)=>{
	switch($("#modalDoubleWarning").modal("hide"),id){
		case"abortAllBtn":
		case"seqAbortBtn":
		case"dragAbortBtn":
			abortHaltAll(!1);
			break;
		case"haltMontBtn":
		case"haltAllBtn":
			abortHaltAll(!0);
			break;
		case"remoteShotAbortbtn":
			abortRemoteAction(tempUIDshot);
			break;
		case"disconnectBtn":
			closeconn();
			break;
		case"startupDisConn":
			startupDisconnectionReq();
			break;
		case"delFromRoboClip":
			rCdelRow(param);
			break;
		case"resetLocalStorage":
			resetLocalStorageData();
			break;
		default:
		errorFire("No action assigned to this button.")
	}
},
addFovMosaicLoaded=obj=>{
	if(handleProfileAlert(),renderFoV(obj),!sameFov){
		let textDesc;
		actualProfileName="Last_Mosaic_Loaded",
		fovdata.profileName=actualProfileName,
		document.querySelector("#textSetupAladin").innerHTML="Profile FoV data selected: "+actualProfileName,
		handleLocalStorageProfile()
	}
	$("#fdb-pAng").val(fovdata.pAng),
	$("#paInd").text(" "+fovdata.pAng+"°")
},
renderFoV=obj=>{
	populateFovDataValues(obj),
	saveLocalStorageAlad(),
	populateAladinfield(),
	vFoVStart(),
	null!==connectedProfileName&&handleProfileAlert()
},
populateFovDataValues=obj=>{
	actualCcdData=obj,
	fovdata.pixsize=obj.PixelSize,
	fovdata.DX=obj.DX,
	fovdata.DY=obj.DY,
	fovdata.pAng=obj.PA,
	fovdata.focal=obj.Focallen,
	fovdata.xsize=Math.round(fovdata.DX*fovdata.pixsize/1e3),
	fovdata.ysize=Math.round(fovdata.DY*fovdata.pixsize/1e3);
	var resocalc=calcfov(fovdata.xsize,fovdata.ysize,fovdata.pixsize,fovdata.focal);
	fovdata.fovx=parseFloat(resocalc[0]),
	fovdata.fovy=parseFloat(resocalc[1]),
	fovdata.reso=resocalc[2]
},
$("#remoteSolveAndSync").click((function(){
	sendRemoteSolveAndSync()
})),
$("#remoteSolveNoSync").click(sendRemoteSolveNoSync),
$("#remoteSolveActualPositionFov").click(sendRemoteSolveFov),
$("#collapseResetLocalStorage").click(()=>{
	$("#resetLocalStorageCont").collapse("toggle")
}),
$("#collapseSolvingTable").click(toggleCollapsePlSolvRes),
getVoyagerProfiles=startup=>{
	let isStartup=startup||!1;
	var Req={
		method:"RemoteGetVoyagerProfiles",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid(isStartup?"RemoteGetVoyagerProfilesstartup":Req.method,Req.params.UID),
	doSend(JSON.stringify(Req))
},
remoteVoyagerProfileStartupReceived=msg=>{
	let temparr,
		activeProfile=msg.list.find(x=>!0===x.isactive).name;
	$("#selectedProfile").text(activeProfile),
	updateActualProfile(activeProfile)
},
remoteGetVoyagerProfilesReceived=msg=>{
	let temparr=msg.list,
		activeProfile=temparr.find(x=>!0===x.isactive).name;
	$("#selectedProfile").text(activeProfile),
	startupConnected||(armCloseProfileList(),$(".prof-li").remove(),$("#cont-profile-list").removeClass("d-none"),temparr.length>0?(temparr.forEach(profItem=>{let classGreen=profItem.isactive?"text-primary":"",disabled=profItem.isactive?"disabled":"",contPh="active",placeholder=profItem.isactive?contPh:"select";$("#profileUl").append('<li class="list-group-item bg-dark align-items-center prof-li"><div class="row w-100"><div class="info-data-item text-left px-1 col-11 my-auto '+classGreen+'">'+profItem.name+'</div><div class="col-1 my-auto p-0"><button class="btn btn-sm btn-primary m-auto flex-end px-2 py-1 btProf '+disabled+'" type="button" name="'+profItem.name+'">'+placeholder+"</button></div></div></li>")}),armProfSelBtn()):(errorFire("No Profile file avaiable into the default folder!","Profiles Not Found"),$("#cont-profile-list").addClass("d-none")))
},
closeSelectionProfileList=()=>{},
remoteGetVoyagerProfilesReceivedError=(message,error)=>{
	errorFire(message+"<br>"+error,"Remote get profiles list error received")
},
document.querySelector("#profileListtBtn").addEventListener("click",e=>{
	getVoyagerProfiles()
}),
armProfSelBtn=()=>{
	const profileBtnSelector=".btProf",profileBtnSelect=document.querySelectorAll(".btProf");
	profileBtnSelect.forEach(btn=>{
		btn.addEventListener("click",e=>{
			let profName=e.currentTarget.name;
			$("#cont-profile-list").addClass("d-none"),
			$("#selectedProfile").text(""),
			setNewProfile(profName)
		})
	})
},
armCloseProfileList=()=>{
	document.querySelector("#closeProfileListtBtn").addEventListener("click",e=>{
		$(".prof-li").remove(),
		$("#cont-profile-list").addClass("d-none")
	})
},
setNewProfile=name=>{
	var Req={
		method:"RemoteSetProfile",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.FileName=name,
	Req.id=generateID(),
	pushUid(Req.method,Req.params.UID),
	doSend(JSON.stringify(Req))
},
remoteSetProfileReceived=()=>{},
profileChangedReceived=msg=>{
	$("#selectedProfile").text(msg.NewProfile),
	updateActualProfile(msg.NewProfile)
},
remoteFocuserMoveTo=(position,isAbsolute,direction)=>{
	var Req={
		method:"RemoteFocuserMoveTo",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.IsAbsoluteMove=isAbsolute,
	Req.params.NewPosition=position,
	Req.params.MoveDirection=direction,
	Req.params.IsBLCompensation=!1,
	Req.params.BLCompVersus=0,
	Req.params.BLCompStep=0,
	Req.params.IsFinalPositionCheck=!0,
	Req.id=generateID(),
	pushUid(Req.method,Req.params.UID),
	doSend(JSON.stringify(Req))
},
sendRemoteFocus=(mode,isGbk)=>{
	var Req={
		method:"RemoteFocusEx",
		params:{}
	};
	Req.params.UID=generateUID(),
	Req.params.FocusMode=mode,
	Req.params.filtroFuocoIndex=$("#filterSelectFocus").val()-1,
	Req.params.IsWDMaxHFD=!1,
	Req.params.WDMaxHFDLimit=-1,
	Req.params.IsRetryFocusOnWD=!1,
	Req.params.PreviousPosition=-1,
	Req.params.StarRAJ2000Str="",
	Req.params.StarDECJ2000Str="",
	Req.params.IsGoBack=isGbk,
	Req.params.IsOnlyPointingStar=!1,
	Req.id=generateID(),
	pushUid(Req.method,Req.params.UID),
	doSend(JSON.stringify(Req))
},
sendInjectRemoteFocus=()=>{
	var Req={method:"RemoteFocusInject",params:{}};
	Req.params.UID=generateUID(),
	Req.params.filtroFuocoIndex=$("#filterSelectFocus").val()-1,
	Req.id=generateID(),
	pushUid(Req.method,Req.params.UID),
	doSend(JSON.stringify(Req))
},
remoteFocusReceivedOK=()=>{},
remoteFocusReceivedError=(message,error)=>{
	errorFire(message+"<br>"+error,"Remote Autofocus Error Received")
},
remoteFocuserMoveReceivedOK=()=>{},
remoteFocuserMoveReceivedError=(message,error)=>{
	errorFire(message+"<br>"+error,"Remote Focus Move Error Received")
},
RemoteFocusInjectReceivedOK=()=>{},
RemoteFocusInjectReceivedError=(message,error)=>{
	errorFire(message+"<br>"+error,"Remote Focus Move Error Received")
},
document.querySelector("#getActualFilterFocus").addEventListener("click",e=>{
	getActualFilterforFocus()
}),
document.querySelectorAll(".autofocusBtn").forEach(btn=>{
	btn.addEventListener("click",(function(event){
		let ckbx,goBack=!document.getElementById("gobackSwitch").checked,
			action=event.currentTarget.getAttribute("data-param");
		sendRemoteFocus(action,goBack)
	}))
}),
document.querySelector("#afInjBtn").addEventListener("click",e=>{
	sendInjectRemoteFocus()
});
const offsetBtnSelector=".btnFocusOffset",btnFocusOffset=document.querySelectorAll(".btnFocusOffset");
function focusStatsArrayAdd(data){
	focusStats.length<10?focusStats.unshift(data):(focusStats.pop(),focusStats.unshift(data)),
	updateFocusStatsTable()
}
function updateFocusStatsTable(){
	$(".focusStatItem").remove(),
	focusStats.forEach((element,i)=>{
		let index=9-i,
			hfd=Math.round(100*(element.HFD+Number.EPSILON))/100,
			temp=Math.round(100*(element.FocusTemp+Number.EPSILON))/100,
			percDev=Math.round(100*(element.PercDev+Number.EPSILON))/100,
			time=timeStampUtility(element.DoneTime).slice(0,8);
		$("#focusStatsUl").append('<li class="list-group-item bg-dark d-flex align-items-center justify-content-between focusStatItem px-2 py-1" id="focusItem'+index+'"><span class="info-data-item extraSmallText col m-0 p-0">'+time+'</span><span class="info-data-item extraSmallText col-2 m-0 p-0">'+hfd+'</span><span class="info-data-item extraSmallText col-2 m-0 p-0">'+cameraFilterList[element.FilterIndex]+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+temp+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+percDev+'</span><span class="info-data-item extraSmallText col m-0 p-0">'+element.Duration+"</span></li>")
	})
}
function sendRemoteRoboClipGetTargetList(){
	var Req={method:"RemoteRoboClipGetTargetList",params:{}};
	Req.params.FilterName=roboClipNameTxt,
	Req.params.FilterGroup=roboClipGroupTxt,
	Req.params.FilterNote=roboClipNoteTxt,
	Req.params.Order=roboClipOrder,
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteRoboClipGetTargetList",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function RemoteRoboClipGetTargetListReceived(obj){
	roboClipTemp=obj.list;
	var dest="FOV",listarray=roboClipTemp;
	let containerUL=document.querySelector("#roboClipUL");
	listarray.length>0?(listarray.forEach((function(target){
		let elLi=document.createElement("li");
		elLi.classList="list-group-item bg-dark d-flex align-items-center roboClip-li",
		elLi.setAttribute("data-uid",target.guid);
		let col1=document.createElement("div");
		col1.classList="col";
		let span1=document.createElement("span");
		span1.classList="info-data-item rcNameList";
		let conName=document.createTextNode(target.targetname);
		span1.appendChild(conName),
		col1.appendChild(span1);
		let col2=document.createElement("div");
		col2.classList="col";
		let span2=document.createElement("span");
		span2.classList="info-data-item pr-1 rcRaList";
		let ra=document.createTextNode(coordinateFormat(target.raj2000,"h")),
			span3=document.createElement("span");
		span3.classList="info-data-item pl-1 rcDecList";
		let dec=document.createTextNode(coordinateFormat(target.decj2000,"º"));
		span3.appendChild(dec),
		span2.appendChild(ra),
		col2.appendChild(span2),
		col2.appendChild(span3);
		let isMosaic=JSON.parse(target.ismosaic),
			mosaTab=isMosaic?"["+target.frow+"x"+target.fcol+"]":"[NO]",
			col3=document.createElement("div");
		col3.classList="col-1",
		col3.setAttribute=target.tiles;
		let span34=document.createElement("span");
		span34.classList=isMosaic?"info-data-item px-1 rcPAlist text-danger":"info-data-item px-1 rcPAlist text-muted";
		let mos=document.createTextNode(mosaTab);
		span34.appendChild(mos),
		col3.appendChild(span34);
		let col4=document.createElement("div");
		col4.classList="col-1";
		let span4=document.createElement("span");
		span4.classList="info-data-item px-1 rcPAlist";
		let pa=document.createTextNode(target.pa);
		span4.appendChild(pa),
		col4.appendChild(span4);
		let col5=document.createElement("div");
		col5.classList="col";
		let span5=document.createElement("span");
		span5.classList="info-data-item rcGruppolist";
		let gruppo=document.createTextNode(target.gruppo);
		span5.appendChild(gruppo),
		col5.appendChild(span5);
		let col6=document.createElement("div");
		col6.classList="col d-none d-md-block";
		let span6=document.createElement("span");
		span6.classList="info-data-item rcNoteList";
		let note=document.createTextNode(target.note);
		span6.appendChild(note),
		col6.appendChild(span6);
		let col7=document.createElement("div");
		col7.classList="col";
		let btn1=document.createElement("button");
		btn1.classList="btn btn-sm btn-outline-success mx-1 flex-end px-2 py-1 btRoboClipLi",
		btn1.setAttribute("type","button"),
		btn1.setAttribute("name","get"),
		btn1.setAttribute("id",target.guid),
		btn1.setAttribute("data-dest",dest),
		btn1.setAttribute("title","Load target");
		let ico1=document.createElement("img");
		ico1.setAttribute("src","./img/paper-plane.png"),
		btn1.appendChild(ico1);
		let btn2=document.createElement("button");
		btn2.classList="btn btn-sm btn-outline-info mx-1 flex-end px-2 py-1 btRoboClipLi",
		btn2.setAttribute("type","button"),
		btn2.setAttribute("name","edit"),
		btn2.setAttribute("id",target.guid),
		btn2.setAttribute("data-dest",dest),
		btn2.setAttribute("title","Edit target");
		let ico2=document.createElement("img");
		ico2.setAttribute("src","./img/edit.png"),
		btn2.appendChild(ico2);
		let btn3=document.createElement("button");
		btn3.classList="btn btn-sm btn-outline-danger mx-1 flex-end px-2 py-1 btRoboClipLi",
		btn3.setAttribute("type","button"),
		btn3.setAttribute("name","del"),
		btn3.setAttribute("id",target.guid),
		btn3.setAttribute("data-dest",dest),
		btn3.setAttribute("title","Delete target");
		let ico3=document.createElement("img");
		ico3.setAttribute("src","./img/trash-alt.png"),
		btn3.appendChild(ico3);
		let btn4=document.createElement("button");
		btn4.classList="btn btn-sm btn-outline-orange mx-1 flex-end px-2 py-1 btRoboClipLi",
		btn4.setAttribute("type","button"),
		btn4.setAttribute("name","showTiles"),
		btn4.setAttribute("data-content",target.tiles),
		btn4.setAttribute("title","Show tiles list"),
		btn4.setAttribute("id",target.guid),
		btn4.setAttribute("data-dest",dest);
		let ico4=document.createElement("img");
		ico4.setAttribute("src","./img/showcsv.png"),
		btn4.appendChild(ico4),
		col7.appendChild(btn1),
		col7.appendChild(btn2),
		isMosaic&&col7.appendChild(btn4),
		col7.appendChild(btn3),
		elLi.appendChild(col1),
		elLi.appendChild(col2),
		elLi.appendChild(col3),
		elLi.appendChild(col4),
		elLi.appendChild(col5),
		elLi.appendChild(col6),
		elLi.appendChild(col7),
		containerUL.appendChild(elLi),
		roboClipGroup.includes(target.gruppo)||roboClipGroup.push(target.gruppo)
	})),updateGroupSelect()):rcFilterSelected?($("#roboClipUL").append('<li class="list-group-item bg-dark d-flex align-items-center roboClip-li"><div class="p-3 col"><p class="mt-2">Roboclip List Empty: nothing found. </p><p>Auto clear your Filter and Reload in<span class="text-primary ml-1" id="timerText"></span></p></div></li><li class="list-group-item bg-dark d-flex align-items-center roboClip-li"><div class="p-3 col"><progress class="m-2" value="0" max="10" id="progressBarReload"></progress></div></li>'),reloadAfterFilterSelectEmpty()):$("#roboClipUL").append('<li class="list-group-item bg-dark d-flex align-items-center roboClip-li"><div class="p-3 col">Roboclip List Empty. Insert and manage your first Target, try to get it from Virtual FOV.</div></li>'),
	rcFilterSelected||$("#filterText").val(""),
	$(".btRoboClipLi").click(actionButtonRoboClip),
	resetRcField(),
	$("#roboClipModal").modal("show"),
	setOrderButton()
}
function RemoteRoboClipGetTargetListReceivedError(mot,cod){
	errorFire(mot+" "+actionResultCodes[cod],"Remote action RoboClip error")
}
function updateGroupSelect(){
	var dropdown=$("#groupSelect");
	for(dropdown.empty(),dropdown.append('<option selected="true" disabled>Select Group</option>'),i=0;i<roboClipGroup.length;i++){
		var groupName=roboClipGroup[i];
		dropdown.append($("<option></option>").attr("value",groupName).text(groupName))
	}
	0==roboClipGroup.length&&dropdown.append($("<option></option>").attr("value","").text("No Group"))
}
function resetRcField(){
	$(".rcField").val(""),
	$("#ledMosaicRoboclip").text(""),
	document.getElementById("rcUid").value="",
	enableSaveDelBtn(!1)
}
function actionButtonRoboClip(event){
	var target=event.currentTarget;
	if("get"===target.name&&(rCgetCoordsAndPa(target.id,!0),showMosListPanel(!1)),"edit"===target.name&&(rCgetCoordsAndPa(target.id,!1),rCeditRow(target.id),showMosListPanel(!1)),"showTiles"===target.name&&showTiles(target.id),"del"===target.name){
		let targetObj,tempName;
		showMosListPanel(!1),
		modalDoubleWarnFire("Are you sure to remove target: "+roboClipTemp.find(x=>x.guid===target.id).targetname,"","delFromRoboClip",target.id)
	}
}
function resetOrderButtons(){
	$(".orderBtn").removeClass("btn-warning").addClass("btn-light")
}
function setOrderButton(){
	resetOrderButtons();
	var tempId="",textForOrderDesc="";
	switch(roboClipOrder){
		case 0:
			tempId="#orderDate",
			textForOrderDesc="Target list ordeded by Date Created Descendent";
			break;
		case 1:
			tempId="#orderName",
			textForOrderDesc="Target list ordeded by Name";
			break;
		case 2:
			tempId="#orderGroup",
			textForOrderDesc="Target list ordeded by Group";
			break;
		case 3:
			tempId="#orderRaDesc",
			textForOrderDesc="Target list ordeded by RA Descending";
			break;
		case 4:
			tempId="#orderRaAsc",
			textForOrderDesc="Target list ordeded by RA Ascending"
	}""!=tempId&&($(tempId).removeClass("btn-light").addClass("btn-warning"),
	$("#rcOrderDescr").text(textForOrderDesc))
}
function rCeditRow(uid){
	let targetObj=roboClipTemp.find(x=>x.guid===uid),
		tempName=targetObj.targetname,
		tempRa=coordinateFormat(targetObj.raj2000,"h"),
		tempDec=coordinateFormat(targetObj.decj2000,"º"),
		tempPa=targetObj.pa,
		tempNote=targetObj.note,
		group=targetObj.gruppo;
	$("#rcName").val(tempName),
	$("#raRc").val(tempRa),
	$("#decRc").val(tempDec),
	$("#paRc").val(tempPa,2),
	$("#rCnote").val(tempNote),
	chkIfMos()?$("#ledMosaicRoboclip").text("Mosaic ["+mosaicSettings.Hnum+"x"+mosaicSettings.Wnum+"]"):$("#ledMosaicRoboclip").text(""),
	document.getElementById("rcUid").value=uid;
	let indexGroup=roboClipGroup.findIndex(x=>x===group);
	document.getElementById("groupSelect").selectedIndex=indexGroup+1,
	showRcAlert("#rcSuccess","You are now editing an this Target: "+tempName),
	enableSaveDelBtn(!0)
}
function rCdelRow(uid){
	remoteRoboClipRemoveTarget(uid)
}
function remoteRoboClipRemoveTarget(guid){
	var Req={method:"RemoteRoboClipRemoveTarget",params:{}};
	Req.params.RefGuidTarget=guid,
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteRoboClipRemoveTarget",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function remoteRoboClipRemoveTargetOkReceived(param){
	$(".roboClip-li").remove(),
	$("#ledMosaicRoboclip").text(""),
	$("#groupSelect").find("option").remove().end().append('<option selected="true" disabled>Select Group</option>'),
	roboClipGroup=[],
	roboClipTemp=[],
	sendRemoteRoboClipGetTargetList(),
	showRcAlert("#rcSuccess","Target Removed "+param.ret),
	resetRcField()
}
function remoteRoboClipRemoveTargetReceivedError(mot,cod){
	errorFire(mot+" "+actionResultCodes[cod],"Remote action RoboClip Delete Target error")
}
function remoteRoboClipUpdateTarget(guid){
	let name=$("#rcName").val(),
		ra=$("#raRc").val();
	ra=convertRainDecimal(ra)/15;
	let dec=$("#decRc").val();
	dec=convertDecinDecimal(dec);
	let pa=$("#paRc").val(),
		note=$("#rCnote").val(),
		gruppo=$("#groupSelect").val(),
		newgroup=$("#newGroup").val(),
		col=mosaicSettings.Wnum,
		row=mosaicSettings.Hnum,
		isMos=col>1||row>1,
		overlap=mosaicSettings.Overlap,
		angleAdjust=mosaicSettings.angleAdj;
	null!=gruppo&&""!=gruppo||(gruppo=newgroup);
	var Req={method:"RemoteRoboClipUpdateTarget",params:{}};
	Req.params.RefGuidTarget=guid,
	Req.params.TargetName=name,
	Req.params.RAJ2000=parseFloat(ra),
	Req.params.DECJ2000=parseFloat(dec),
	Req.params.PA=parseFloat(pa),
	Req.params.Group=gruppo,
	Req.params.Note=note,
	Req.params.IsMosaic=isMos,
	Req.params.FROW=parseInt(row),
	Req.params.FCOL=parseInt(col),
	Req.params.overlap=overlap,
	Req.params.angleAdj=angleAdjust,
	Req.params.TILES=isMos?getMosaicCsvText():"",
	Req.params.DX=fovdata.DX,
	Req.params.DY=fovdata.DY,
	Req.params.PixelSize=fovdata.pixsize,
	Req.params.Focallen=fovdata.focal,
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteRoboClipUpdateTarget",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function remoteRoboClipUpdateTargetOkReceived(param){
	$(".roboClip-li").remove(),
	$("#ledMosaicRoboclip").text(""),
	$("#groupSelect").find("option").remove().end().append('<option selected="true" disabled>Select Group</option>'),
	roboClipGroup=[],
	roboClipTemp=[],
	resetRcField(),
	sendRemoteRoboClipGetTargetList(),
	showRcAlert("#rcSuccess","Target Updated "+param.ret)
}
function remoteRoboClipUpdateTargetReceivedError(mot,cod){
	errorFire(mot+" "+actionResultCodes[cod],"Remote action RoboClip Update Target error")
}
function remoteRoboClipAddTarget(guid){
	let name=$("#rcName").val(),
		ra=$("#raRc").val();
	ra=convertRainDecimal(ra)/15;
	let dec=$("#decRc").val();
	dec=convertDecinDecimal(dec);
	let pa=$("#paRc").val(),
		note=$("#rCnote").val(),
		gruppo=$("#groupSelect").val(),
		newgroup=$("#newGroup").val(),
		col=mosaicSettings.Wnum,
		row=mosaicSettings.Hnum,
		isMos=col>1||row>1,
		overlap=mosaicSettings.Overlap,
		angleAdjust=mosaicSettings.angleAdj;
	null!=gruppo&&""!=gruppo||(gruppo=newgroup);
	var Req={method:"RemoteRoboClipAddTarget",params:{}};
	Req.params.GuidTarget=guid,
	Req.params.TargetName=name,
	Req.params.RAJ2000=parseFloat(ra),
	Req.params.DECJ2000=parseFloat(dec),
	Req.params.PA=parseFloat(pa),
	Req.params.Group=gruppo,
	Req.params.Note=note,
	Req.params.IsMosaic=isMos,
	Req.params.FROW=parseInt(row),
	Req.params.FCOL=parseInt(col),
	Req.params.overlap=overlap,
	Req.params.angleAdj=angleAdjust,
	Req.params.TILES=isMos?getMosaicCsvText():"",
	Req.params.DX=fovdata.DX,
	Req.params.DY=fovdata.DY,
	Req.params.PixelSize=fovdata.pixsize,
	Req.params.Focallen=fovdata.focal,
	Req.params.UID=generateUID(),
	Req.id=generateID(),
	pushUid("RemoteRoboClipAddTarget",Req.params.UID),
	doSend(JSON.stringify(Req))
}
function remoteRoboClipAddTargetOkReceived(param){
	$(".roboClip-li").remove(),
	$("#ledMosaicRoboclip").text(""),
	$("#groupSelect").find("option").remove().end().append('<option selected="true" disabled>Select Group</option>'),
	roboClipGroup=[],
	roboClipTemp=[],
	resetRcField(),
	sendRemoteRoboClipGetTargetList(),
	showRcAlert("#rcSuccess","Target Added Successiful! "+param.ret)
}
function remoteRoboClipAddTargetReceivedError(mot,cod){
	errorFire(mot+" "+actionResultCodes[cod],"Remote action RoboClip Add New Target error")
}
function showRcAlert(id,msg){
	$(id+" p").text(msg),
	$(id).show(300),
	$(id).delay(3e3).hide(300)
}
function showRcAlertAndRemain(id,msg){
	$(id+" p").text(msg),
	$(id).show(300)
}
function enableSaveDelBtn(condition){
	let rcUid=$("#rcUid").val();
	condition&&""!==rcUid?(setBtnActive("#deleteFormRc"),setBtnActive("#saveFormRc"),$(".rcField").prop("disabled",!condition)):""==rcUid&&(setBtnNotActive("#deleteFormRc"),
	setBtnNotActive("#saveFormRc"),
	$(".rcField").prop("disabled",!condition))
}
function executeFilterApp(txt){
	let tempCont="";
	switch(txt){
		case"Name":
		case"Group":
		case"Note":
			tempCont=txt;
			break;
		case"Clear":
			tempCont="Select",
			resetFilterCont();
			break;
		default:
			tempCont="Select"
	}
	$("#filter-btn-id").text(tempCont)
}
function resetFilterCont(){
	if(preResetFilters(),rcFilterSelected){
		rcFilterSelected=!1;
		let order=roboClipOrder;
		resetRcField(),
		$("#roboClipModal").modal("hide"),
		setTimeout((function(){
			roboClipOrder=order,
			sendRemoteRoboClipGetTargetList()
		}),500)
	}
}
function preResetFilters(){
	resetFilterVar(),
	$("#filterText").val(""),
	$("#filter-btn-id").text("Select")
}
function rcFilterActivation(){
	let tempFilterType=$("#filter-btn-id").text(),
		txt=$("#filterText").val();
	if(resetFilterVar(),"Select"!=tempFilterType&&""!=txt){
		let order=roboClipOrder;
		$("#roboClipModal").modal("hide"),
		setTimeout((function(){
			switch(roboClipOrder=order,rcFilterSelected=!0,tempFilterType){
				case"Name":
					roboClipNameTxt=txt;
					break;
				case"Group":
					roboClipGroupTxt=txt;
					break;
				case"Note":
					roboClipNoteTxt=txt
			}
			sendRemoteRoboClipGetTargetList()
		}),500)
	}else""!=txt&&($("#filter-btn-id").addClass("animated bounceIn fast"),
	$("#filter-btn-id").one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){
		$("#filter-btn-id").removeClass("animated bounceIn fast")
	})))
}
function resetFilterVar(){
	roboClipNameTxt="",
	roboClipGroupTxt="",
	roboClipNoteTxt=""
}
function reloadAfterFilterSelectEmpty(){
	var timeleft=10,
		downloadTimer=setInterval((function(){
			document.getElementById("progressBarReload").value=timeleft,
			document.getElementById("timerText").innerText=timeleft+" sec",
			(timeleft-=1)<=0&&(clearInterval(downloadTimer),
			resetFilterCont())
		}),1e3)
}
function frameFoV(vFoVwidth,vFoVheight,vFoVrotat,frameColor,winOriz,winVert,scopeRes,maxOvl,annotateOvl,description){
	this.vFoVwidth=vFoVwidth,
	this.vFoVheight=vFoVheight,
	this.vFoVrotat=vFoVrotat,
	this.frameColor=frameColor,
	this.winOriz=winOriz,
	this.winVert=winVert,
	this.scopeRes=scopeRes,
	this.maxOvl=maxOvl,
	this.annotateOvl=annotateOvl,
	this.description=description,
	this.fdbgi="fdbFovFrame",
	this.aLinst=null,
	this.animId="unset",
	this.forceRedraw=!0,
	this.lastSize=[0,0],
	this.forceZoom=0,
	this.lastZoom=0,
	this.aZoomOn=!1,
	this.actDrw=actDrw,
	this.stopDrw=stopDrw,
	this.autoZoom=autoZoom,
	this.sendFrg=sendFrg,
	this.sndBk=sndBk,
	this.vFovDraw=vFovDraw;
	let tempCTX=null;
	function actDrw(){
		if(tempCTX=this.aLinst.ctx[this.fdbgi],this.animId=fovReqAnim(actDrw.bind(this)),this.aLinst.getFov()[0]!=this.lastZoom||this.aLinst.getSize()[0]!=this.lastSize[0]||this.aLinst.getSize()[1]!=this.lastSize[1]||this.forceRedraw){
			this.forceRedraw=!1,
			tempCTX.font="10px Roboto",
			tempCTX.fillStyle="#E678FA",
			tempCTX.clearRect(-tempCTX.canvas.width/2-1,-tempCTX.canvas.height/2-1,tempCTX.canvas.width+2,tempCTX.canvas.height+2),
			this.aLinst.getSize()[0]==this.lastSize[0]&&this.aLinst.getSize()[1]==this.lastSize[1]||(this.aLinst.resizeCanvas(this.fdbgi),this.autoZoom()),
			this.aZoomOn&&(this.forceZoom>0?($(".zoomIn-container, .zoomOut-container").css("display","none"),$(".bws-maxIndicator").css("display","block"),this.forceZoom<=90?(this.aLinst.setFOVRange(null,null),this.aLinst.progressiveFov(this.forceZoom,!1),this.aLinst.setFOVRange(this.aLinst.getFov()[0],this.aLinst.getFov()[0])):(this.aLinst.setFOVRange(null,null),this.aLinst.progressiveFov(90,!0),this.aLinst.setFOVRange(this.aLinst.getFov()[0],this.aLinst.getFov()[0]))):($(".zoomIn-container, .zoomOut-container").css("display","block"),$(".bws-maxIndicator").css("display","none"),this.aLinst.setFOVRange(null,null),this.aLinst.getFov()[0]>90&&(this.aLinst.setFov(1),this.aLinst.progressiveFov(90,!0)),this.aLinst.setFOVRange(0,90)));
			var scaleDegToPix=Math.round(aladin.getSize()[1]/2)/(aladin.pix2world(Math.round(aladin.getSize()[0]/2)-1,Math.round(aladin.getSize()[1]/2))[1]-aladin.pix2world(Math.round(aladin.getSize()[0]/2)-1,aladin.getSize()[1]-1)[1]),
				rectWidth=this.vFoVwidth*scaleDegToPix,
				rectHeight=this.vFoVheight*scaleDegToPix;
			let internalFill="rgba(255, 255, 255, .06)";
			tempCTX.rotate(this.vFoVrotat.toRad()),
			tempCTX.strokeStyle=this.frameColor,
			tempCTX.fillStyle=internalFill,
			tempCTX.font="14px Roboto",
			tempCTX.setLineDash([]),
			mosaicTiles=[];
			let panelW=rectWidth/mosaicSettings.Wnum,
				panelH=rectHeight/mosaicSettings.Hnum,
				bigSide=Math.max(panelW,panelH),
				overlapPanelX=bigSide*mosaicSettings.Overlap/100,
				overlapPanelY=bigSide*mosaicSettings.Overlap/100,
				overlapMainRedX=overlapPanelX*(mosaicSettings.Wnum-1),
				overlapMainRedY=overlapPanelY*(mosaicSettings.Hnum-1),
				canvasW=tempCTX.canvas.clientWidth,
				canvasY=tempCTX.canvas.clientHeight;
			if(mosaicSettings.Wnum>1||mosaicSettings.Hnum>1){
				let progNum=1;
				for(var line=0;line<mosaicSettings.Hnum;line++)
					for(var row=0;row<mosaicSettings.Wnum;row++){
						tempCTX.setLineDash([8,3]),
						tempCTX.lineWidth="1";
						let tempX=row*(panelW-overlapPanelX)-(rectWidth-overlapMainRedX)/2,
							tempY=line*(panelH-overlapPanelY)-(rectHeight-overlapMainRedY)/2;
						tempCTX.save(),
						tempCTX.translate(tempX+panelW/2,tempY+panelH/2);
						let individualX=0-panelW/2,individualY=0-panelH/2,abs={};
						abs.x=Math.round(10*tempCTX.getTransform().e)/10,
						abs.y=Math.round(10*tempCTX.getTransform().f)/10;
						let individualAngleRotation=calculateSingleRot(abs),
							toRotate=0,
							individualPA=fovdata.pAng+individualAngleRotation;
						individualPA<0&&(individualPA+=360),
						mosaicSettings.angleAdj||(toRotate=individualAngleRotation,individualPA=fovdata.pAng),
						tempCTX.rotate(toRotate*Math.PI/180),
						tempCTX.strokeRect(individualX,individualY,panelW,panelH),
						tempCTX.fillRect(individualX,individualY,panelW,panelH);
						let tempTileRaDec=aladin.pix2world(abs.x,abs.y),
							pAngleDegRound=Math.round(10*individualPA)/10;
						360==pAngleDegRound&&(pAngleDegRound=0);
						let tempObjTileData={x:abs.x,y:abs.y,raHours:tempTileRaDec[0]/15,decDegr:tempTileRaDec[1],ra:coordinateFormatClear(tempTileRaDec[0]/15),dec:coordinateFormatClear(tempTileRaDec[1]),singlePA:pAngleDegRound};
						mosaicTiles[progNum-1]=tempObjTileData,
						tempCTX.setLineDash([]),
						tempCTX.beginPath(),
						tempCTX.moveTo(0,-12);
						var toxV=0,toyV=-panelH/2;
						tempCTX.lineTo(0,toyV),
						tempCTX.stroke(),
						tempCTX.restore(),
						tempCTX.setLineDash([]),
						tempCTX.fillStyle="rgba(15, 71, 255, 0.5)",
						tempCTX.strokeText(progNum,row*(panelW-overlapPanelX)-(rectWidth-overlapMainRedX)/2+panelW/2-5,line*(panelH-overlapPanelY)-(rectHeight-overlapMainRedY)/2+panelH/2+5),
						tempCTX.fillStyle=internalFill,progNum++,tempCTX.restore()
					}
			}
			tempCTX.lineWidth="1",
			tempCTX.setLineDash([]),
			1==mosaicSettings.Wnum&&1==mosaicSettings.Hnum?(tempCTX.strokeRect(-rectWidth/2,-rectHeight/2,rectWidth,rectHeight),tempCTX.fillRect(-rectWidth/2,-rectHeight/2,rectWidth,rectHeight)):(rectWidth-=overlapMainRedX,rectHeight-=overlapMainRedY);
			let lWidt=2,
				linelenght=60,
				ctxVoy=tempCTX,
				start1x=-rectWidth/2-lWidt+1,
				start1y=-rectHeight/2-lWidt+1,
				start2x=-1*start1x,
				start2y=-1*start1y,
				start3x=-1*start1x,
				start3y=start1y,
				start4x=start1x,
				start4y=start2y;
			tempCTX.lineWidth=lWidt,
			ctxVoy.beginPath(),
			ctxVoy.moveTo(start1x+linelenght,start1y),
			ctxVoy.lineTo(start1x,start1y),
			ctxVoy.lineTo(start1x,start1y+linelenght),
			ctxVoy.moveTo(start2x-linelenght,start2y),
			ctxVoy.lineTo(start2x,start2y),
			ctxVoy.lineTo(start2x,start2y-linelenght),
			ctxVoy.moveTo(start3x-linelenght,start3y),
			ctxVoy.lineTo(start3x,start3y),
			ctxVoy.lineTo(start3x,start3y+linelenght),
			ctxVoy.moveTo(start4x+linelenght,start4y),
			ctxVoy.lineTo(start4x,start4y),
			ctxVoy.lineTo(start4x,start4y-linelenght),
			ctxVoy.stroke(),
			tempCTX.strokeStyle=this.frameColor,
			tempCTX.fillStyle=this.frameColor,
			tempCTX.lineWidth="1",
			rectWidth>135&&(tempCTX.font="11px Roboto",tempCTX.fillText("PA "+fovdata.pAng+"°",rectWidth/2-58,rectHeight/2-8)),
			handleProfileAlert();
			let tempAlertText="";
			if(rectWidth>135){
				tempCTX.font="11px Roboto",
				sameFov||(tempCTX.fillStyle="#fb3");
				let textProfile=tempAlertText+"Fov Profile: "+actualProfileName;
				tempCTX.fillText(textProfile,-rectWidth/2+10,rectHeight/2-8)
			}
			if(tempCTX.fillStyle=this.frameColor,this.annotateOvl&&rectWidth>142&&1==mosaicSettings.Wnum&&1==mosaicSettings.Hnum){
				tempCTX.font=rectWidth>249?"12px Roboto":"10px Roboto",
				tempCTX.fillText(parseFloat(this.vFoVwidth).toFixed(2)+"° ( "+(60*parseFloat(this.vFoVwidth)).toFixed(1)+"' )",-rectWidth/2+45,-rectHeight/2+15),
				tempCTX.beginPath();
				var fromx=-rectWidth/2,
					fromy=-rectHeight/2+11,
					tox=fromx+38,
					toy=fromy,
					headlen=6,
					dx=tox-fromx,
					dy=toy-fromy,
					angle=Math.atan2(dy,dx);
				tempCTX.moveTo(fromx,fromy),
				tempCTX.lineTo(tox,toy),
				tempCTX.lineTo(tox-6*Math.cos(angle-Math.PI/6),toy-6*Math.sin(angle-Math.PI/6)),
				tempCTX.moveTo(tox,toy),
				tempCTX.lineTo(tox-6*Math.cos(angle+Math.PI/6),toy-6*Math.sin(angle+Math.PI/6)),
				tempCTX.stroke(),
				0!==this.winOriz&&tempCTX.fillText(parsefloat(this.winOriz).toFixed(2)+'" per pixel',-rectWidth/2+50,-rectHeight/2+26),
				0!==this.scopeRes&&tempCTX.fillText("Dawes Limit: "+(1*this.scopeRes).toFixed(2)+'"',-rectWidth/2+45,-rectHeight/2+39)
			}
			if(this.annotateOvl&&rectHeight>123&&1==mosaicSettings.Wnum&&1==mosaicSettings.Hnum){
				tempCTX.font=rectWidth>249?"12px Roboto":"10px Roboto",
				tempCTX.rotate(90..toRad()),
				tempCTX.fillText(parseFloat(this.vFoVheight).toFixed(2)+"° ( "+(60*parseFloat(this.vFoVheight)).toFixed(1)+"' )",
				-rectHeight/2+45,rectWidth/2-7),
				0!==this.winVert&&tempCTX.fillText(this.winVert.toFixed(2)+'" per pixel.',
				-rectHeight/2+40,rectWidth/2-18),
				tempCTX.beginPath();
				var fromx2=-rectHeight/2,
					fromy2=rectWidth/2-11,
					tox2=fromx2+38,
					toy2=fromy2,
					headlen2=6,
					dx2=tox2-fromx2,
					dy2=toy2-fromy2,
					angle2=Math.atan2(dy2,dx2);
				tempCTX.moveTo(fromx2,fromy2),
				tempCTX.lineTo(tox2,toy2),
				tempCTX.lineTo(tox2-6*Math.cos(angle2-Math.PI/6),toy2-6*Math.sin(angle2-Math.PI/6)),
				tempCTX.moveTo(tox2,toy2),
				tempCTX.lineTo(tox2-6*Math.cos(angle2+Math.PI/6),toy2-6*Math.sin(angle2+Math.PI/6)),
				tempCTX.stroke(),
				tempCTX.rotate(-90..toRad())
			}
			this.annotateOvl?this.aLinst.view.showReticle(!0):this.aLinst.view.showReticle(!1),
			tempCTX.rotate(-this.vFoVrotat.toRad()),
			this.lastZoom=this.aLinst.getFov()[0],
			this.lastSize[0]=this.aLinst.getSize()[0],
			this.lastSize[1]=this.aLinst.getSize()[1]
		}
	}
	function stopDrw(){
		"unset"!=this.animId&&(fovCanAnim(this.animId),this.animId="unset",tempCTX.clearRect(-tempCTX.canvas.width/2-1,-tempCTX.canvas.height/2-1,tempCTX.canvas.width+2,tempCTX.canvas.height+2),this.aZoomOn&&($(".aladin-location").css("display","block"),$(".zoomIn-container, .zoomOut-container").css("display","block"),$(".bws-maxIndicator").css("display","none"),this.aLinst.setFOVRange(null,null),this.aLinst.view.showReticle(!0)))
	}
	function autoZoom(){
		if(this.maxOvl){
			var bbHeight=legatoH(-this.vFoVwidth/2,-this.vFoVheight/2,this.vFoVwidth/2,-this.vFoVheight/2,-this.vFoVwidth/2,this.vFoVheight/2,this.vFoVwidth/2,this.vFoVheight/2,this.vFoVrotat),
				bbWidth=legatoW(-this.vFoVwidth/2,-this.vFoVheight/2,this.vFoVwidth/2,-this.vFoVheight/2,-this.vFoVwidth/2,this.vFoVheight/2,this.vFoVwidth/2,this.vFoVheight/2,this.vFoVrotat),
				hRatio=this.aLinst.getSize()[0]/this.aLinst.getSize()[1];
			this.forceZoom=Math.max(1.03*bbWidth,bbHeight*hRatio*1.03)
		}else this.forceZoom=0
	}
	function sendFrg(){
		this.aZoomOn=!0
	}
	function sndBk(){
		null!==this.aLinst&&($(".aladin-location").css("display","block"),$(".zoomIn-container, .zoomOut-container").css("display","block"),$(".bws-maxIndicator").css("display","none"),this.aLinst.setFOVRange(null,null),this.aLinst.view.showReticle(!0)),
		this.aZoomOn=!1
	}
	function vFovDraw(aLinst){
		this.stopDrw(),
		this.aLinst=aLinst,
		this.autoZoom(),
		this.forceRedraw=!0,
		this.actDrw()
	}
}
btnFocusOffset.forEach(btn=>{
	btn.addEventListener("click",e=>{
		let value=parseInt(e.currentTarget.getAttribute("data-param")),
			direction=value>0?0:1;remoteFocuserMoveTo(value,!1,0)
	})
}),
document.querySelector("#goToPositionFocuser").addEventListener("click",e=>{
	let value=document.querySelector("#focuserPositionGoto").value;
	remoteFocuserMoveTo(value,!0,0)
}),
getActualFilterforFocus=()=>{
	getActualFilter()
},
sendFocusInject=()=>{
	var Req={method:"RemoteFocusInject",params:{}};
	Req.params.UID=generateUID(),
	Req.params.filtroFuocoIndex=$("#filterSelectFocus").val()-1,
	Req.id=generateID(),
	pushUid("RemoteFocusInject",Req.params.UID),
	doSend(JSON.stringify(Req))
},
$("#resetFocusChart").click(e=>{
	resetFocusGraph()
}),
autoFocusResultReceived=msg=>{
	1==msg.Done?populateFocusTable(msg):errorFire("AutoFocus error or not started correctly","Autofocus Error")
},
populateFocusTable=msg=>{
	let hfd=Math.round(100*(msg.HFD+Number.EPSILON))/100;
	addDataFocuser(hfd,msg.FilterIndex,msg.FilterColor,msg.FocusTemp),
	focusStatsArrayAdd(msg)
},
$("#alaRoboClipbtn").click((function(){
	resetRcField(),
	resetFilterCont(),
	sendRemoteRoboClipGetTargetList()
})),
$("#roboClipModal").on("hide.bs.modal",(function(){
	showMosListPanel(!1)
})),
$("#roboClipModal").on("hidden.bs.modal",(function(){
	$(".roboClip-li").remove(),
	$("#ledMosaicRoboclip").text(""),
	$("#groupSelect").find("option").remove().end().append('<option selected="true" disabled>Select Group</option>'),
	roboClipGroup=[],
	roboClipTemp=[],
	roboClipOrder=0,
	resetRcField(),
	enableSaveDelBtn(!1)
})),
$("#clearFormRc").click(resetRcField),
showTiles=uid=>{
	let targetObj=roboClipTemp.find(x=>x.guid===uid),
		csvList=targetObj.tiles,tempArray=csvToArray(csvList);
	setClipboardMosList(csvList),
	tempArray.unshift(["Tile name","RAJ2000","DECJ2000","PA"]);
	let cont=document.querySelector("#csvListDiv"),
		nameStr=targetObj.targetname;
	const namecont=document.querySelector("#mosListTargetName");
	namecont.innerText=nameStr,
	cont.textContent="";
	let tbl=document.createElement("table");
	tbl.classList="mount-panel-item",
	tbl.style.width="100%",
	tbl.setAttribute("border","1");
	let tbdy=document.createElement("tbody");
	tempArray.forEach((function(row){
		let tr=document.createElement("tr");
		row.forEach((function(cell){
			let td=document.createElement("td");
			td.classList="p-1",
			td.appendChild(document.createTextNode(cell)),
			tr.appendChild(td)
		})),
		tbdy.appendChild(tr)
	})),
	tbl.appendChild(tbdy),
	cont.appendChild(tbl),
	showMosListPanel(!0)
},
rCgetCoordsAndPa=(uid,loading=!0)=>{
	let isLoading=loading,
		targetObj=roboClipTemp.find(x=>x.guid===uid),
		tempRa=targetObj.raj2000,
		tempDec=targetObj.decj2000,
		tempPa=targetObj.pa,
		tempName=targetObj.name,
		ismosaic=JSON.parse(targetObj.ismosaic),
		fcol=targetObj.fcol,
		frow=targetObj.frow,
		overlap=targetObj.overlap,
		angleadj=JSON.parse(targetObj.angleadj),
		focallen=targetObj.focallen,
		pixelsize=targetObj.pixelsize,
		dx=targetObj.dx,
		dy=targetObj.dy;
	if(aladin.gotoRaDec(15*tempRa,tempDec),getCoordinateAladin(),$("#fdb-pAng").val(tempPa),$("#paInd").text(" "+tempPa+"°"),changePAng(tempPa),$("#inputsearch").val(""),isLoading&&$("#roboClipModal").modal("hide"),ismosaic){
		let obj={};
		obj.DX=dx,
		obj.DY=dy,
		obj.Focallen=focallen,
		obj.PixelSize=pixelsize,
		obj.PA=tempPa,
		addFovMosaicLoaded(obj),
		setNewValuesMosaic(frow,fcol,overlap,angleadj),
		setTimeout(vFoVStart,500)
	}else resetMosaic()
},
$("#orderDate").removeClass("btn-light").addClass("btn-warning"),
$(".orderBtn").on("click",(function(e){
	let param=parseInt(this.getAttribute("data-param"));
	param!=roboClipOrder&&($("#roboClipModal").modal("hide"),
	setTimeout((function(){
		roboClipOrder=param,
		sendRemoteRoboClipGetTargetList()
	}),500))
})),
$("#newFormRc").click((function(){
	resetRcField();
	let guid=generateUID();
	$("#rcUid").val(guid),
	enableSaveDelBtn(!0)
})),
$("#saveFormRc").click((function(){
	let guid=$("#rcUid").val(),
		tempRa=$("#raRc").val();
	if(""!=guid){
		let targetObj;
		null!=roboClipTemp.find(x=>x.guid===guid)?remoteRoboClipUpdateTarget(guid):""!=tempRa?remoteRoboClipAddTarget(guid):showRcAlert("#rcWarning","Please insert coords"),
		preResetFilters(),
		roboClipOrder=0
	}
})),
$("#deleteFormRc").click((function(){
	let rcUid=$("#rcUid").val();
	if(""!=rcUid){
		let targetObj=roboClipTemp.find(x=>x.guid===rcUid);
		if(null!=targetObj){
			let tempName;
			modalDoubleWarnFire("Are you sure to remove target: "+targetObj.targetname,"","delFromRoboClip",rcUid)
		}else showRcAlert("#rcWarning","Cannot Delete Target Before Save it.")
	}else showRcAlert("#rcWarning","Select a Target from the list above.")
})),
$("#filterMenuSelId").children().click((function(){
	executeFilterApp(this.innerText)
})),
$("#clear-btn-id").click(resetFilterCont),
$("#applyFilterBtn").click((function(){
	rcFilterActivation()
})),
getMosaicCsvText=()=>{
	let csvStr="";
	for(var i=0;i<mosaicTiles.length;i++){
		var line="PANE "+(i+1);line+=";",
			line+=mosaicTiles[i].raHours,
			line+=";",
			line+=mosaicTiles[i].decDegr,
			line+=";",
			csvStr+=(line+=mosaicTiles[i].singlePA)+"\r\n"
	}
	return csvStr
},
csvToArray=csv=>{
	var resultArray=[];
	return csv.split("\n").forEach((function(row){
		var rowArray=[];
		row.split(";").forEach((function(cell){
			rowArray.push(cell)
		})),
		""!=rowArray&&resultArray.push(rowArray)
	})),
	resultArray
},
createTableFromArray=arr=>{
	let tempArray,content="";
	return arr.forEach((function(row){
		content+="<tr>",
		row.forEach((function(cell){
			content+="<td>"+cell+"</td>"
		})),
		content+="</tr>"
	})),
	content
},
r2d=radians=>{
	let pi;
	return radians*(180/Math.PI)
},
d2r=degrees=>{
	let pi;
	return degrees*(Math.PI/180)
},
calculateSingleRot=abs=>{
	let res,abs2={};
	abs2.y=abs.y-.1;
	let p1=aladin.pix2world(abs.x,abs.y),
		p2=aladin.pix2world(abs.x,abs2.y);
	p1[0]=d2r(p1[0]),
	p1[1]=d2r(p1[1]),
	p2[0]=d2r(p2[0]),
	p2[1]=d2r(p2[1]);
	let L=p2[0]-p1[0];
	return res=Math.atan2(Math.sin(L),Math.cos(p1[1])*Math.tan(p2[1])-Math.sin(p1[1])*Math.cos(L)),res=r2d(res),res
};
var totTempPointData=300,
	totGuidePointData=90,
	YscaleGuideChart=2,
	YscaleValues=[.5,1,2,3,4,6],
	prevXguide,
	prevYguide;
Array.prototype.max=function(){
	return Math.max.apply(null,this)
},
Array.prototype.min=function(){
	return Math.min.apply(null,this)
};
var tempChartCanvas=document.getElementById("tempChart"),
	dataTempchart={type:"line",labels:[],display:0,datasets:[{label:"Cooler Temp",fill:!1,yAxisID:"temperature",lineTension:0,backgroundColor:"rgba(75,192,192,0.4)",borderColor:"rgba(66,133,244,1)",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"rgba(75,192,192,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(75,192,192,1)",pointHoverBorderColor:"rgba(220,220,220,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[]},{label:"Set Temp",fill:!1,yAxisID:"temperature",lineTension:0,backgroundColor:"rgba(75,192,192,0.4)",borderColor:"rgba(75,192,192,1)",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"rgba(75,192,192,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(75,192,192,1)",pointHoverBorderColor:"rgba(220,220,220,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[]},{label:"Cooler Power",fill:"start",yAxisID:"power",lineTension:0,backgroundColor:"rgba(204,0,0,0.35)",borderColor:" rgba(204,0,0,1)",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(75,192,192,1)",pointHoverBorderColor:"rgba(220,220,220,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[]}]},
	optionsTempChart={showLines:!0,animation:!1,legend:{display:!1},scales:{xAxes:[{display:!1}],yAxes:[{id:"temperature",display:!0,position:"right",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#4285f4",min:-50,max:50}},{id:"power",display:!0,ticks:{fontSize:8,beginAtZero:!0,fontColor:"#ff0000",min:0,max:100}}]}},
	myTempChart=new Chart(tempChartCanvas,{type:"line",data:dataTempchart,options:optionsTempChart});
function addDataTemp(TEMP,POW,SETtemp){
	var tempData=dataTempchart.datasets[0].data,
		setData=dataTempchart.datasets[1].data,
		powerData=dataTempchart.datasets[2].data;
	TEMP<1234&&TEMP>-1234&&(tempData.splice(0,1),tempData.push(TEMP)),
	POW<1234&&POW>-1234&&(powerData.splice(0,1),powerData.push(POW)),
	SETtemp<1234&&SETtemp>-1234&&(setData.splice(0,1),setData.push(SETtemp)),
	myTempChart.update()
}
var guideChartCanvas=document.getElementById("guideChart"),
	dataGuideChart={type:"line",labels:["Dec","Ra"],display:0,datasets:[{label:"Xcorr",fill:!1,yAxisID:"Xcorr",lineTension:0,backgroundColor:"rgba(75,192,192,0.4)",borderColor:"rgba(66,133,244,1)",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"rgba(75,192,192,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(75,192,192,1)",pointHoverBorderColor:"rgba(220,220,220,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[]},{label:"Ycorr",fill:!1,yAxisID:"Ycorr",lineTension:0,backgroundColor:"rgba(75,192,192,0.4)",borderColor:"#ff0000",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"rgba(75,192,192,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(75,192,192,1)",pointHoverBorderColor:"rgba(220,220,220,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[]}]},
	optionsGuideChart={showLines:!0,animation:!1,legend:{display:!1},scales:{xAxes:[{display:!1}],yAxes:[{id:"Xcorr",display:!0,position:"left",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#4285f4",min:-1*YscaleGuideChart,max:YscaleGuideChart}},{id:"Ycorr",display:!0,position:"right",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#4285f4",min:-1*YscaleGuideChart,max:YscaleGuideChart}}]}},
	myGuideChart=new Chart(guideChartCanvas,{type:"line",data:dataGuideChart,options:optionsGuideChart});
function addDataguide(xcorr,ycorr){
	if(xcorr!=prevXguide||ycorr!=prevYguide){
		prevXguide=xcorr,
		prevYguide=ycorr;
		var xdata=dataGuideChart.datasets[0].data,
			ydata=dataGuideChart.datasets[1].data;
		xdata.splice(0,1),
		xdata.push(xcorr),
		ydata.splice(0,1),
		ydata.push(ycorr),
		myGuideChart.update()
	}
}
function populateArrayData(){
	for(i=0;i<totTempPointData;i++)
		dataTempchart.datasets[0].data.push(0),
		dataTempchart.datasets[1].data.push(0),
		dataTempchart.datasets[2].data.push(0),
		dataTempchart.labels.push(0);
	for(i=0;i<totGuidePointData;i++)
		dataGuideChart.datasets[0].data.push(0),
		dataGuideChart.datasets[1].data.push(0),
		dataGuideChart.labels.push(0);
	myGuideChart.update(),
	myTempChart.update()
}
function resetGuideGraph(){
	for(dataGuideChart.datasets[0].data=[],dataGuideChart.datasets[1].data=[],dataGuideChart.labels=[],i=0;i<totGuidePointData;i++)
		dataGuideChart.datasets[0].data.push(0),
		dataGuideChart.datasets[1].data.push(0),
		dataGuideChart.labels.push(0);
	myGuideChart.update()
}
function resetTempGraph(){
	for(dataTempchart.datasets[0].data=[],dataTempchart.datasets[1].data=[],dataTempchart.datasets[2].data=[],dataTempchart.labels=[],i=0;i<totTempPointData;i++)
		dataTempchart.datasets[0].data.push(0),
		dataTempchart.datasets[1].data.push(0),
		dataTempchart.datasets[2].data.push(0),
		dataTempchart.labels.push(0);
	myTempChart.update()
}
populateArrayData();
var imageStatChartCanvas=document.getElementById("imageStatChart"),
	dataimageStatChart={type:"line",labels:[".",".",".",".",".",".",".","."],display:0,datasets:[{label:"HFD",fill:!1,yAxisID:"HFD",lineTension:0,backgroundColor:"rgba(43,187,173,0.4)",borderColor:"#00C851",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"rgba(43,187,173,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(43,187,173,1)",pointHoverBorderColor:"rgba(43,187,173,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[5,7,8,2,1,5,9,1]},{label:"StarIndex",fill:!1,yAxisID:"StarIndex",lineTension:0,backgroundColor:"rgba(51,181,229,0.4)",borderColor:"#33b5e5",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"rgba(51,181,229,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:"rgba(51,181,229,1)",pointHoverBorderColor:"rgba(51,181,229,1)",pointHoverBorderWidth:2,pointRadius:0,pointHitRadius:5,data:[3,2,1,7,2,3,1,5]}]},
	optionsImageChart={showLines:!0,animation:!1,legend:{display:!0},scales:{xAxes:[{display:!0}],yAxes:[{id:"HFD",display:!0,position:"right",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#00C851",min:0,max:10}},{id:"StarIndex",display:!0,position:"right",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#33b5e5",min:0,max:30}}]}},
	myImageChart=new Chart(imageStatChartCanvas,{type:"line",data:dataimageStatChart,options:optionsImageChart});
function addDataImage(hfdData,StarIndexData){
	var dataset1=dataimageStatChart.datasets[0].data,
		dataset2=dataimageStatChart.datasets[1].data;
	dataset1.splice(0,1),
	dataset1.push(hfdData),
	dataset2.splice(0,1),
	dataset2.push(StarIndexData),
	myImageChart.options.scales.yAxes[0].ticks.max=Math.ceil(percentage(Math.max(...dataset1),10)),
	myImageChart.options.scales.yAxes[1].ticks.max=Math.ceil(percentage(Math.max(...dataset2),10)),
	myImageChart.update()
}
function resetImageGraph(){
	for(dataimageStatChart.datasets[0].data=[],dataimageStatChart.datasets[1].data=[],dataimageStatChart.labels=[],$(".imgStatItem").remove(),i=0;i<8;i++)
		dataimageStatChart.datasets[0].data.push(0),
		dataimageStatChart.datasets[1].data.push(0),
		dataimageStatChart.labels.push(".");
	myImageChart.update()
}
resetImageGraph(),
$("#resetGuideChart").click(resetGuideGraph),
$("#resetTempChart").click(resetTempGraph),
$("#resetImgChart").click((function(){
	resetImageGraph()
})),
updateGuideChartYScale=pixel=>{
	YscaleGuideChart=pixel,
	myGuideChart.options.scales.yAxes[0].ticks.min=-1*YscaleGuideChart,
	myGuideChart.options.scales.yAxes[1].ticks.min=-1*YscaleGuideChart,
	myGuideChart.options.scales.yAxes[0].ticks.max=YscaleGuideChart,
	myGuideChart.options.scales.yAxes[1].ticks.max=YscaleGuideChart,
	localStorage.setItem("YscaleGuideChart",YscaleGuideChart),
	$("#yGuideScaleText").text(YscaleGuideChart),
	myGuideChart.update()
},
getLocalStorageYscaleGuideChart=()=>{
	let tempY=JSON.parse(localStorage.getItem("YscaleGuideChart"));
	null!==tempY&&(YscaleGuideChart=tempY)
},
initYScaleGuideChart=()=>{
	getLocalStorageYscaleGuideChart(),
	updateGuideChartYScale(YscaleGuideChart),
	$("#yGuideScaleText").text(YscaleGuideChart)
},
yMinusScale=()=>{
	if(YscaleGuideChart>=1){
		let n=YscaleValues.indexOf(YscaleGuideChart);
		updateGuideChartYScale(YscaleValues[n-1]),
		document.getElementById("scaleYplus").disabled=!1
	}else document.getElementById("scaleYminus").disabled=!0;
	YscaleGuideChart<1&&(document.getElementById("scaleYminus").disabled=!0)
},
yPlusScale=()=>{
	if(YscaleGuideChart<6){
		let n=YscaleValues.indexOf(YscaleGuideChart);
		updateGuideChartYScale(YscaleValues[n+1]),
		document.getElementById("scaleYminus").disabled=!1
	}else document.getElementById("scaleYplus").disabled=!0;
	6==YscaleGuideChart&&(document.getElementById("scaleYplus").disabled=!0)
},
document.getElementById("scaleYminus").addEventListener("click",yMinusScale),
document.getElementById("scaleYplus").addEventListener("click",yPlusScale);
var focuserStatChartCanvas=document.getElementById("focusStatChart"),
	dataFocuserStatChart={type:"line",labels:[".",".",".",".",".",".",".",".",".","."],display:0,datasets:[{label:"HFD",fill:!1,yAxisID:"HFD",lineTension:0,backgroundColor:"rgba(43,187,173,0.4)",borderColor:"#CCC",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",pointBorderColor:"#ccc",pointBackgroundColor:["red","green","blue","red","red","red","white","red","green","blue"],pointBorderWidth:0,pointHoverRadius:5,pointHoverBackgroundColor:"#fff",pointHoverBorderColor:"#fff",pointHoverBorderWidth:2,pointRadius:5,pointHitRadius:5,data:[5,7,8,2,1,5,9,2,3,5]},{data:[]},{data:["R","G","B","R","R","R","L","R","G","B"]},{lineTension:.5,backgroundColor:"rgba(0,255,255,0.2)",borderColor:"rgba(0,255,255,0.3)",yAxisID:"Temp",fill:!0,pointRadius:0,data:["12","13","1","2","3","1","0","-5","0","2"]}]},
	optionsFocuserChart={showLines:!0,animation:!1,beginAtZero:!0,legend:{display:!1},scales:{xAxes:[{display:!0}],yAxes:[{id:"HFD",display:!0,position:"right",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#ccc",min:0,max:10}},{id:"Temp",display:!0,position:"right",ticks:{fontSize:8,beginAtZero:!0,fontColor:"#0ff",min:-20,max:20}}]},tooltips:{enabled:!0,bodyFontSize:10,custom:function(tooltip){tooltip.opacity>0||lightRowFilterOff()},callbacks:{title:function(tooltipItem,data){let val=data.datasets[0].data[tooltipItem[0].index],label=data.datasets[0].label+" "+val;if(0!==val){let index=tooltipItem[0].index,color=data.datasets[0].pointBackgroundColor[index];lightRowFilter(index,color)}return label},label:function(tooltipItem,data){let filterName=data.datasets[2].data[tooltipItem.index];return"NoFilter"==filterName?"":"Filter "+filterName},labelColor:function(tooltipItem,data){let filterColor=data.config.data.datasets[0].pointBackgroundColor[tooltipItem.index];return{borderColor:filterColor,backgroundColor:filterColor}}}}},
	myfocuserChart=new Chart(focuserStatChartCanvas,{type:"line",data:dataFocuserStatChart,options:optionsFocuserChart});
function resetFocusGraph(){
	for(dataFocuserStatChart.datasets[0].data=[],dataFocuserStatChart.datasets[0].pointBackgroundColor=[],dataFocuserStatChart.datasets[1].data=[],dataFocuserStatChart.datasets[2].data=[],dataFocuserStatChart.datasets[3].data=[],focusStats=[],$(".focusStatItem").remove(),i=0;i<10;i++)
		dataFocuserStatChart.datasets[0].data.push(0),
		dataFocuserStatChart.datasets[0].pointBackgroundColor.push("#999999"),
		dataFocuserStatChart.datasets[2].data.push("NoFilter"),
		dataFocuserStatChart.datasets[3].data.push(0);
	myfocuserChart.update()
}
function legatoW(xTL,yTL,xTR,yTR,xBL,yBL,xBR,yBR,theta){
	var cT=Math.cos(theta.toRad()),
		sT=Math.sin(theta.toRad()),
		xTLr=xTL*cT+yTL*sT,
		xTRr=xTR*cT+yTR*sT,
		xBLr=xBL*cT+yBL*sT,
		xBRr=xBR*cT+yBR*sT;
	return Math.max(xTLr,xTRr,xBLr,xBRr)-Math.min(xTLr,xTRr,xBLr,xBRr)
}
function legatoH(xTL,yTL,xTR,yTR,xBL,yBL,xBR,yBR,theta){
	var cT=Math.cos(theta.toRad()),
		sT=Math.sin(theta.toRad()),
		yTLr=xTL*sT+yTL*cT,
		yTRr=xTR*sT+yTR*cT,
		yBLr=xBL*sT+yBL*cT,
		yBRr=xBR*sT+yBR*cT;
	return Math.max(yTLr,yTRr,yBLr,yBRr)-Math.min(yTLr,yTRr,yBLr,yBRr)
}
function vFoVStart(){
	vFoVdata[vFoVfrm].getFovDataVoy(),
	vFoVdata[vFoVfrm].compDisplay=!0,
	virtualFoV[vFoVfrm].vFoVwidth=vFoVdata[vFoVfrm].fovWidth*mosaicSettings.Wnum,
	virtualFoV[vFoVfrm].vFoVheight=vFoVdata[vFoVfrm].fovHeight*mosaicSettings.Hnum,
	virtualFoV[vFoVfrm].vFoVrotat=vFoVdata[vFoVfrm].fovRotation,
	virtualFoV[vFoVfrm].maxOvl=vFoVdata[vFoVfrm].fovMax,
	virtualFoV[vFoVfrm].annotateOvl=vFoVdata[vFoVfrm].fovNotes,
	virtualFoV[vFoVfrm].frameColor=vFoVdata[vFoVfrm].fovColour,
	virtualFoV[vFoVfrm].winOriz=vFoVdata[vFoVfrm].fovAppH,
	virtualFoV[vFoVfrm].winVert=vFoVdata[vFoVfrm].fovAppV,
	virtualFoV[vFoVfrm].scopeRes=vFoVdata[vFoVfrm].fovScopeRes,
	virtualFoV[vFoVfrm].description=vFoVdata[vFoVfrm].compDesc,
	virtualFoV[vFoVfrm].sendFrg(),virtualFoV[vFoVfrm].vFovDraw(aladin)
}
function animLogo(){
	logoanimationaccepted?(tlLoopAnim.restart(),tlLoopAnim2.restart()):($(".st0").css({fill:"red",transition:"1.0s"}),tlStartAnim3.restart())
}
function stopAnimLogo(){
	logoanimationaccepted?(tlLoopAnim.pause(),tlLoopAnim2.pause(),tlcloseAnim.play(),tlCloseAnim2.play()):($(".st0").css({fill:"#4285F4",transition:".5s"}),tlCloseAnim3.play())
}
addDataFocuser=(hfdData,filterIndex,filterColor,temperature)=>{
	let hfdSet=dataFocuserStatChart.datasets[0].data,
		filterColorSet=dataFocuserStatChart.datasets[0].pointBackgroundColor,
		temperatureSet=dataFocuserStatChart.datasets[3].data,
		filterNameSet=dataFocuserStatChart.datasets[2].data,
		filterLabelColorSet=dataFocuserStatChart.datasets[1].data,
		filterName=getFilterNameFromIndex(filterIndex);
	hfdSet.splice(0,1),
	hfdSet.push(hfdData),
	filterColorSet.splice(0,1),
	filterColorSet.push(filterColor),
	filterLabelColorSet.splice(0,1),
	filterLabelColorSet.push(filterColor),
	filterNameSet.splice(0,1),
	filterNameSet.push(filterName),
	temperatureSet.splice(0,1),
	temperatureSet.push(temperature),
	myfocuserChart.options.scales.yAxes[0].ticks.max=Math.ceil(percentage(Math.max(...hfdSet),10)),
	myfocuserChart.options.scales.yAxes[1].ticks.max=Math.ceil(percentage(Math.max(...temperatureSet),10)+5),
	myfocuserChart.options.scales.yAxes[1].ticks.min=Math.ceil(percentage(Math.min(...temperatureSet),10)-5),
	myfocuserChart.update()
},
getFilterNameFromIndex=index=>-1==index?"NoFilter":cameraFilterList[index],
lightRowFilter=(idx,col)=>{
	let item="#focusItem"+idx,colstring=col+" !important",
		elem=document.querySelector(item);
	elem.style.setProperty("background-color",col,"important"),
	elem.style.setProperty("color",setcolorContrast(col))
},
lightRowFilterOff=()=>{
	$(".focusStatItem").css({background:"#212121",color:"white"})
},
resetFocusGraph(),
jQuery("img.svg").each((function(){
	var $img=jQuery(this),
		imgID=$img.attr("id"),
		imgClass=$img.attr("class"),
		imgURL=$img.attr("src");
	jQuery.get(imgURL,(function(data){
		var $svg=jQuery(data).find("svg");
		void 0!==imgID&&($svg=$svg.attr("id",imgID)),
		void 0!==imgClass&&($svg=$svg.attr("class",imgClass+" replaced-svg")),
		$svg=$svg.removeAttr("xmlns:a"),
		$img.replaceWith($svg)
	}),"xml")
}));
var tlLoopAnim=anime.timeline({targets:"#logorotate",duration:1e3,easing:"easeInOutSine",direction:"alternate",loop:!0,autoplay:!1});
tlLoopAnim.add({scale:{value:1.2,duration:500,easing:"easeInOutSine"},rotate:{value:"2turn",duration:1e3}});
var tlcloseAnim=anime.timeline({targets:"#logorotate",duration:1e3,easing:"easeOutExpo",loop:!1,autoplay:!1});
tlcloseAnim.add({scale:{value:1,duration:500,easing:"easeInOutSine"},rotate:{value:"0turn",duration:1e3}});
var tlLoopAnim2=anime.timeline({targets:"#logorotate2",duration:2e3,easing:"easeInOutSine",direction:"alternate",loop:!0,autoplay:!1});
tlLoopAnim2.add({scale:{value:25,duration:1500,easing:"easeInOutSine"},rotate:{value:"3turn",duration:2e3},opacity:.1});
var tlCloseAnim2=anime.timeline({targets:"#logorotate2",duration:1e3,easing:"easeInOutSine",loop:!1,autoplay:!1});
tlCloseAnim2.add({scale:{value:.5,duration:500,easing:"easeInOutSine"},rotate:{value:"0turn",duration:1e3},opacity:1});
var tlStartAnim3=anime.timeline({targets:"#logorotate2",duration:1500,easing:"easeInOutSine",loop:!1,autoplay:!1});
tlStartAnim3.add({scale:{value:1.2,duration:1500,easing:"easeInOutSine"},opacity:.5});
var tlCloseAnim3=anime.timeline({targets:"#logorotate2",duration:1e3,easing:"easeInOutSine",loop:!1,autoplay:!1});
tlCloseAnim3.add({scale:{value:.5,duration:2e3,easing:"easeInOutSine"},opacity:1});
